[{"path":"https://pharmaverse.github.io/gridify/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted [Contributor Covenant][homepage], version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://pharmaverse.github.io/gridify/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to gridify","title":"Contributing to gridify","text":"outlines propose change gridify.","code":""},{"path":"https://pharmaverse.github.io/gridify/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contributing to gridify","text":"contributions covered project’s LICENSE.","code":""},{"path":"https://pharmaverse.github.io/gridify/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to gridify","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://pharmaverse.github.io/gridify/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to gridify","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem accepted new feature. ’ve found bug, create associated issue illustrate bug minimal reprex. New developers can view UML diagram detailed overview package’s design class relationships using mermaid code inst/UML/UML_graph.md. system.file(\"UML/UML_graph.md\", package = \"gridify\")","code":""},{"path":"https://pharmaverse.github.io/gridify/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to gridify","text":"recommend create Git branch pull request (PR). Look CI build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s). Suppose changes related current issue current project; please name branch follows: <issue_id>_<short_description>. Please use underscore (_) delimiter word separation.","code":""},{"path":"https://pharmaverse.github.io/gridify/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to gridify","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Create Custom Layout","text":"vignette shows create custom layouts adding titles, subtitles, footnotes, text elements around outputs using gridifyLayout() function. Please note creating custom layout may required. intended substantial changes adjustments applied identical way across multiple objects projects. minor one-adjustments please see help(set_cell) information.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"layout-basics","dir":"Articles","previous_headings":"","what":"Layout Basics","title":"Create Custom Layout","text":"layout grid structure defined number rows columns creates spaces cells text elements can added. cell defined rows columns spans.","code":"library(gridify) # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  # In the simple_layout there are three rows and one column # creating a grid of three cells vertically. show_layout(simple_layout())"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"example-layout","dir":"Articles","previous_headings":"","what":"Example Layout","title":"Create Custom Layout","text":"example layout. arguments explained .","code":"new_layout <- gridifyLayout(   nrow = 4L,   ncol = 2L,   heights = grid::unit(c(1, 1, 1, 0.05), c(\"lines\", \"lines\", \"null\", \"npc\")),   widths = grid::unit(c(0.5, 0.5), \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   adjust_height = FALSE,   object = gridifyObject(row = 3, col = 1:2),   cells = gridifyCells(     company = gridifyCell(row = 1, col = 2, x = 1, hjust = 1, y = 1, vjust = 1),     title = gridifyCell(row = 2, col = 1, x = 1, hjust = 0.5),     footer = gridifyCell(row = 4, col = 1, x = 0, hjust = 0)   ) )  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = new_layout ) %>%   set_cell(\"company\", \"Company Ltd\") %>%   set_cell(\"title\", \"This is my title\") %>%   set_cell(\"footer\", \"This is a very long footer with lots of words\")"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"nrow-and-ncol","dir":"Articles","previous_headings":"","what":"Nrow and Ncol","title":"Create Custom Layout","text":"nrow ncol arguments number rows columns layout. define grid structure layout. thinking number rows columns required, empty row/column included margin space around border. margin defined another argument, margin. See details .","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"heights-and-widths","dir":"Articles","previous_headings":"","what":"Heights and Widths","title":"Create Custom Layout","text":"row column needs heights widths, respectively, set provide size various cells. heights widths need call grid::unit() containing elements equal number rows/columns layout. Widths typically take unit npc (Normalised Parent Coordinates) able take percentage whole space rather specific width cm, mm inches. However, unit also valid entry. Heights can challenging, depending required layout. quick summary type unit can useful heights: npc works best proportions. However, text element large space, may overlap others. lines good unit know many lines text element , useful elements consistent size across outputs. cm/mm/inches useful text element must consistent height specification given measurement. null can used value 1 means text element take much space left specific heights considered. useful row main object placed . setting heights rows layout, ensure allocate enough height object cell row, object within annotated output might visible smaller sizes.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"adjusting-heights-automatically","dir":"Articles","previous_headings":"","what":"Adjusting Heights automatically","title":"Create Custom Layout","text":"adjust_height argument can used prevent text elements overlapping bigger height row . done changing height row dynamically depending space text element take . Please note argument affect row unit npc row height defined measurement percentage available height.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"margin-argument","dir":"Articles","previous_headings":"","what":"Margin argument","title":"Create Custom Layout","text":"layout needs margin defined determine much space around output. separate argument need considered defining number rows columns text element. margin must call grid::unit(...) vector arguments t, r, b l given values, top, right, bottom left margins respectively e.g.","code":"# a 10% margin on all sides grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\")"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"background-colour","dir":"Articles","previous_headings":"","what":"Background colour","title":"Create Custom Layout","text":"background argument controls background colour layout. may done match layout’s background colour gridify object. background value can set default colour (white), specific colour e.g.","code":"# set the background colour to be the default background <- grid::get.gpar()$fill  # set the background colour to a specific colour background <- \"blue\" background <- \"#96BA39\""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"adding-the-object-argument","dir":"Articles","previous_headings":"","what":"Adding the Object argument","title":"Create Custom Layout","text":"object’s location defined object argument gridifyLayout(). must call gridifyObject() specifying rows columns object span within layout. arguments height width gridifyObject() determine much space object take within cell(s) location. default values 1, equivalent 100% width/height area.","code":"# an object that spans only row 3 but both columns 1 and 2 gridifyObject(row = 3, col = 1:2)"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"adding-the-scales-argument","dir":"Articles","previous_headings":"","what":"Adding the Scales argument","title":"Create Custom Layout","text":"scales argument seen predefined layouts simple_layout() complex_layout(). option lets users select different layout configurations adjusting scale settings. However argument function gridifyLayout(), custom made wrapper layout functions need custom made user. transparency, section explain scales argument works, , demonstrate add custom layout. predefined simple complex layouts, can choose \"free\" \"fixed\" scales. using \"free\" scales, row heights proportionally 15%, 70% 15% total area. Conversely, \"fixed\" scales, row heights determined number lines required text element, remaining space allocated object.   example add scales custom layout options npc lines.   can see example, show_layout() function doesn’t always show complete picture. especially visible lines set height 0 space given text element assigned .","code":"simple_layout(scales = \"free\") #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0.15 npc #>   Row 2: 0.7 npc #>   Row 3: 0.15 npc #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 0.7 npc #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0, show_layout(simple_layout(scales = \"free\")) simple_layout(scales = \"fixed\") #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 1 null #>   Row 3: 0 lines #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0, # As no lines were defined, the object takes up the whole space below show_layout(simple_layout(scales = \"fixed\")) scales_example_layout <- function(     margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),     global_gpar = grid::gpar(),     scales = c(\"npc\", \"lines\")) {   scales <- match.arg(scales, c(\"npc\", \"lines\"))    heights <- if (scales == \"npc\") {     grid::unit(c(0.15, 0.7, 0.15), \"npc\")   } else {     grid::unit(c(0, 1, 0), \"lines\")   }     gridifyLayout(     nrow = 3L,     ncol = 1L,     heights = heights,     widths = grid::unit(1, \"npc\"),     margin = margin,     global_gpar = global_gpar,     background = grid::get.gpar()$fill,     adjust_height = TRUE,     object = gridifyObject(row = 2, col = 1),     cells = gridifyCells(       title = gridifyCell(row = 1, col = 1),       footer = gridifyCell(row = 3, col = 1)     )   ) }  scales_example_layout(scales = \"npc\") #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0.15 npc #>   Row 2: 0.7 npc #>   Row 3: 0.15 npc #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 0.7 npc #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0, show_layout(scales_example_layout(scales = \"npc\")) scales_example_layout(scales = \"lines\") #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 1 lines #>   Row 3: 0 lines #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 1 lines #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0, show_layout(scales_example_layout(scales = \"lines\"))"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"adding-cells","dir":"Articles","previous_headings":"","what":"Adding cells","title":"Create Custom Layout","text":"Now grid specified heights widths rows columns, object placed correct cell, remaining cells can added. cells places user can add text elements output. cell doesn’t exist layout text element can never placed user. cells created making call gridifyCells() requires named arguments returning calls gridifyCell(). names arguments names user referencing adding text elements output make sure named appropriately. row column locations cell defined call gridifyCell() along possible arguments like graphical parameters alignment text cell. See ?gridifyCell details.","code":"gridifyCells(   company = gridifyCell(row = 1, col = 2, x = 1, hjust = 1, y = 1, vjust = 1),   title = gridifyCell(row = 2, col = 1, x = 1, hjust = 0.5),   footer = gridifyCell(row = 4, col = 1, x = 0, hjust = 0) )"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"row-and-column-positions-of-cells","dir":"Articles","previous_headings":"","what":"Row and Column positions of Cells","title":"Create Custom Layout","text":"row col arguments gridifyCell() can set value, sequence span. examples help explain arguments can set. Replace row col spanning across columns: row = 3 - cell positioned 3rd row row = 2:4 - cell positioned across rows 2, 3 4 row = c(1, 3) - cell positioned across rows 1, 2 3 four arguments gridifyCell() define alignment text within cell: x, y, hjust vjust. used pairs x hjust, y vjust define point graph point text, respectively, text elements . x hjust work horizontal y vjust work vertical. Imagine pinning piece paper board; pin go paper board. hjust/vjust value point pin goes though paper x/y pin hits board. take values 0 1, default 0.5. examples help explain alignment works. Replace x y hjust vjust working vertical direction: x = 0, hjust = 0 - left side text left cell x = 0.5, hjust = 0 - left side text middle cell x = 1, hjust = 1 - right side text right side cell x = 0.8, hjust = 1 - right side text 20% right side cell","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"maximum-number-of-characters-per-line-for-a-cell","dir":"Articles","previous_headings":"","what":"Maximum Number of Characters per Line for a Cell","title":"Create Custom Layout","text":"Please use mch argument gridifyCell() control maximum number characters per line. many cases, output dimensions font size may known advance, making difficult predict appropriate value mch. end user can specify mch argument set_cell() function, alternatively, provide text newline characters already included.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"default-graphical-parameters","dir":"Articles","previous_headings":"","what":"Default Graphical Parameters","title":"Create Custom Layout","text":"graphical parameters can set global level argument global_gpar gridifyLayout() function. can also set cell level argument gpar gridifyCell() function. Order precedence graphical parameters : local > default > global set_cell(..., gpar) > gridifyCell(..., gpar) > gridifyLayout(..., global_gpar) Therefore, graphical parameter can overwritten users calls set_cell().  text element fonts can also customized easily per user requirements.","code":"new_layout <- gridifyLayout(   nrow = 3L,   ncol = 1L,   heights = grid::unit(c(0.1, 0.8, 0.1), \"npc\"),   widths = grid::unit(1, \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"inches\"),   # default graphics for whole output set in global_gpar   global_gpar = grid::gpar(fontfamiy = \"Courier\", col = \"navy\"),   background = grid::get.gpar()$fill,   adjust_height = FALSE,   object = gridifyObject(row = 2, col = 1),   cells = gridifyCells(     # default graphics for title cell here:     title = gridifyCell(row = 1, col = 1, gpar = grid::gpar(fontsize = 20)),     footer = gridifyCell(row = 3, col = 1)   ) )  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = new_layout ) %>%   set_cell(\"title\", \"This is a title\") %>%   # graphics specs can be overwritten in set_cell   set_cell(\"footer\", \"This is a footer\", gpar = grid::gpar(col = \"purple\")) new_layout <- gridifyLayout(   nrow = 3L,   ncol = 1L,   heights = grid::unit(c(0.1, 0.8, 0.1), \"npc\"),   widths = grid::unit(1, \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"inches\"),   global_gpar = grid::gpar(     fontfamiy = \"Courier\",     col = \"navy\",     fontface = \"italic\"   ), # default italic text for the whole output   background = grid::get.gpar()$fill,   adjust_height = FALSE,   object = gridifyObject(row = 2, col = 1),   cells = gridifyCells(     title = gridifyCell(row = 1, col = 1),     footer = gridifyCell(row = 3, col = 1)   ) )  # overwriting the default fontface in the footer cell in the call to set_cell # so the footer will now have bold and italic instead of the default italic gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = new_layout ) %>%   set_cell(\"title\", \"This is a title\") %>%   set_cell(\"footer\", \"This is a footer\", gpar = grid::gpar(fontface = \"bold.italic\"))"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"default-cell-text","dir":"Articles","previous_headings":"","what":"Default cell text","title":"Create Custom Layout","text":"text argument gridifyCell() can used set default text cell. Please note, text provided end user set_cell() take higher priority overwrite default.","code":"new_layout <- gridifyLayout(   nrow = 4L,   ncol = 2L,   heights = grid::unit(c(1, 1, 1, 0.05), c(\"lines\", \"lines\", \"null\", \"npc\")),   widths = grid::unit(c(0.5, 0.5), \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   adjust_height = FALSE,   object = gridifyObject(row = 3, col = 1:2),   cells = gridifyCells(     company = gridifyCell(row = 1, col = 2, x = 1, hjust = 1, y = 1, vjust = 1),     title = gridifyCell(row = 2, col = 1, text = \"Default Title\", x = 1, hjust = 0.5),     footer = gridifyCell(row = 4, col = 1, x = 0, hjust = 0)   ) )  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = new_layout ) %>%   set_cell(\"company\", \"Company Ltd\") %>%   set_cell(\"footer\", \"This is a very long footer with lots of words\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   company: filled #>   title: filled #>   footer: filled"},{"path":"https://pharmaverse.github.io/gridify/articles/create_custom_layout.html","id":"adding-a-watermark","dir":"Articles","previous_headings":"","what":"Adding a Watermark","title":"Create Custom Layout","text":"add watermark output, create cell covering desired rows columns set transparency text, font size large rotation 45 degrees.","code":"new_layout <- gridifyLayout(   nrow = 3L,   ncol = 1L,   heights = grid::unit(c(0.05, 0.9, 0.05), \"npc\"),   widths = grid::unit(1, \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"cm\"),   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   adjust_height = FALSE,   object = gridifyObject(row = 2, col = 1),   cells = gridifyCells(     title = gridifyCell(row = 1, col = 1),     footer = gridifyCell(row = 3, col = 1),     watermark = gridifyCell(row = 1:3, col = 1, rot = 45, gpar = grid::gpar(fontsize = 90, alpha = 0.3))   ) ) #> Warning in validityMethod(object): Overlapping cells detected at positions: #> 1-1, 3-1  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = new_layout ) %>%   set_cell(\"watermark\", \"DRAFT\")"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started with gridify","text":"pharmaceutical industry, many fields rely heavily data reporting, often need create tables figures specific text elements — like titles, subtitles, captions, footnotes — positioned consistently around output. Manually arranging elements can time-consuming prone inconsistencies across projects. gridify addresses building base R grid package, making easy add flexible, customizable elements around plot table. ensures consistent layout text elements (like headers, footers, etc.) across various output types, : ggplot2 objects flextable tables gt tables Base R figures grid-convertible object (e.g., grob, gtable) gridify based graphical system, even tables become graphical objects (grobs) hood, meaning end result always image.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get Started with gridify","text":"gridify yet CRAN, can install Pharmaverse GitHub (example): source git clone, example: load gridify:","code":"devtools::install_github(\"pharmaverse/gridify\", dependencies = TRUE, build_manual = TRUE, build_vignettes = TRUE) devtools::install(\"gridify\") library(gridify) library(magrittr)"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic Workflow","title":"Get Started with gridify","text":"Create object (figure table). Choose layout (built-custom). Wrap object gridify(). Fill text cells using set_cell() headers, footers, notes, etc. minimal example using ggplot2 demonstration. approach works gt, flextable, base R figures. rtables, convert flextable using rtables.officer::tt_to_flextable() following approach.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"create-a-figure","dir":"Articles","previous_headings":"Basic Workflow","what":"1. Create a Figure","title":"Get Started with gridify","text":"(tables, simply replace basic_plot gt flextable object.)","code":"library(ggplot2)  basic_plot <- ggplot2::ggplot(mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_point()"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"pick-a-layout","dir":"Articles","previous_headings":"Basic Workflow","what":"2. Pick a Layout","title":"Get Started with gridify","text":"gridify package, layout predefined structure determines various elements output arranged. defines positions different components output, title, subtitle, footnotes, etc., available area. Layouts gridify define place titles, footers, subtitles, etc., figures (tables, grobs) consistent text elements. can use built-layouts create (see vignette(\"create_custom_layout\", package = \"gridify\")). built-layouts include:","code":"pharma_layout_letter() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 14 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 1 lines #>   Row 2: 1 lines #>   Row 3: 1 lines #>   Row 4: 1 lines #>   Row 5: 1 lines #>   Row 6: 1 lines #>   Row 7: 0 lines #>   Row 8: 0 lines #>   Row 9: 1 lines #>   Row 10: 1 null #>   Row 11: 1 lines #>   Row 12: 1 lines #>   Row 13: 0 lines #>   Row 14: 1 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 10 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 10: 1 null #>  #> Margin: #>   Top: 1 inches #>   Right: 1 inches #>   Bottom: 1.23 inches #>   Left: 1 inches #>  #> Global graphical parameters: #>   fill: transparent #>   col: black #>   lty: solid #>   lwd: 1 #>   cex: 1 #>   fontsize: 9 #>   lineheight: 0.95 #>   font: 1 #>   fontfamily: serif #>   alpha: 1 #>   lineend: round #>   linejoin: round #>   linemitre: 10 #>   lex: 1  #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   header_left_1: #>     row:1, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_2: #>     row:2, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_3: #>     row:3, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_right_1: #>     row:1, col:3, text:CONFIDENTI..., mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_2: #>     row:2, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_3: #>     row:3, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   output_num: #>     row:4, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_1: #>     row:5, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_2: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_3: #>     row:7, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   by_line: #>     row:8-9, col:1-3, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   note: #>     row:11, col:1-3, text:NULL, mch:100, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   references: #>     row:13, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_left: #>     row:14, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_right: #>     row:14, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   watermark: #>     row:10, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:45,  #>     gpar - fontsize:80, alpha:0.3,"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"wrap-with-gridify","dir":"Articles","previous_headings":"Basic Workflow","what":"3. Wrap with gridify","title":"Get Started with gridify","text":"Use gridify() function combine object (figure table) specified layout:","code":"grob_object <- gridify(   object = basic_plot,   layout = pharma_layout_letter() )"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"add-text-to-cells","dir":"Articles","previous_headings":"Basic Workflow","what":"4. Add Text to Cells","title":"Get Started with gridify","text":"Use show method (return object) check available cells.  can add text labeled cells (headers, footers, notes, etc.).  output automatically drawn user.","code":"grob_object #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left_1: empty #>   header_left_2: empty #>   header_left_3: empty #>   header_right_1: filled #>   header_right_2: empty #>   header_right_3: empty #>   output_num: empty #>   title_1: empty #>   title_2: empty #>   title_3: empty #>   by_line: empty #>   note: empty #>   references: empty #>   footer_left: empty #>   footer_right: empty #>   watermark: empty grob_object <- grob_object %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") %>%   set_cell(\"output_num\", \"<Figure> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"title_3\", \"<Optional Title 3>\") %>%   set_cell(\"by_line\", \"By: <GROUP>, <optionally: Demographic parameters>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"DRAFT\")  grob_object #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left_1: filled #>   header_left_2: filled #>   header_left_3: filled #>   header_right_1: filled #>   header_right_2: filled #>   header_right_3: filled #>   output_num: filled #>   title_1: filled #>   title_2: filled #>   title_3: filled #>   by_line: filled #>   note: filled #>   references: filled #>   footer_left: filled #>   footer_right: filled #>   watermark: filled"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"print-or-assign","dir":"Articles","previous_headings":"Basic Workflow","what":"5. Print or Assign","title":"Get Started with gridify","text":"Calling print() gridify object displays final layout R session, invisibly returns grid grob:  Raw grid code behind: gridify uses meta-programming capture grid calls needed assemble layout. means can retrieve audit exactly figure table constructed. functionality particularly valuable regulated environments (e.g., pharmaceuticals) whenever transparency consistency critical.","code":"final_grob <- print(grob_object) final_grob #> grid::gTree(children = grid::gList(grid::rectGrob(x = 0, y = 0,  #>     width = 1, height = 1, just = c(\"left\", \"bottom\"), gp = grid::gpar(fill = \"transparent\",  #>         col = \"transparent\")), grid::gTree(children = do.call(grid::gList,  #>     list(grid::grobTree(grid::editGrob(OBJECT, vp = grid::viewport(height = grid::unit.pmax(grid::unit(1,  #>         \"npc\"), grid::unit(1, \"inch\")), width = grid::unit.pmax(grid::unit(1,  #>         \"npc\"), grid::unit(1, \"inch\")))), vp = grid::viewport(layout.pos.row = 10,  #>         layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"My Company\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 1,  #>             layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"<PROJECT> / <INDICATION>\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 2,  #>             layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"<STUDY>\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 3,  #>             layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"CONFIDENTIAL\",  #>         x = 1, y = 0.5, hjust = 1, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 1,  #>             layout.pos.col = 3)), grid::grobTree(grid::textGrob(label = \"<Draft or Final>\",  #>         x = 1, y = 0.5, hjust = 1, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 2,  #>             layout.pos.col = 3)), grid::grobTree(grid::textGrob(label = \"Data Cut-off: YYYY-MM-DD\",  #>         x = 1, y = 0.5, hjust = 1, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 3,  #>             layout.pos.col = 3)), grid::grobTree(grid::textGrob(label = \"<Figure> xx.xx.xx\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar(fontsize = 9)), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 4,  #>         layout.pos.col = 2)), grid::grobTree(grid::textGrob(label = \"<Title 1>\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar(fontsize = 9)), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 5,  #>         layout.pos.col = 2)), grid::grobTree(grid::textGrob(label = \"<Title 2>\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar(fontsize = 9)), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 6,  #>         layout.pos.col = 2)), grid::grobTree(grid::textGrob(label = \"<Optional Title 3>\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar(fontsize = 9)), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 7,  #>         layout.pos.col = 2)), grid::grobTree(grid::textGrob(label = \"By: <GROUP>, <optionally: Demographic parameters>\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 8:9,  #>             layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"<Note or Footnotes>\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 11,  #>             layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"<References:>\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 13,  #>             layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\",  #>         x = 0, y = 0.5, hjust = 0, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 14,  #>             layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"Page xx of nn\",  #>         x = 1, y = 0.5, hjust = 1, vjust = 0.5, rot = 0, gp = grid::gpar(fontsize = 9)),  #>         gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 14,  #>             layout.pos.col = 3)), grid::grobTree(grid::textGrob(label = \"DRAFT\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 45,  #>         gp = grid::gpar(fontsize = 80)), gp = grid::gpar(fontsize = 80,  #>         alpha = 0.3), vp = grid::viewport(layout.pos.row = 10,  #>         layout.pos.col = 2)))), vp = grid::viewport(name = \"lyt\",  #>     x = grid::unit(1, \"inches\"), y = grid::unit(1.23, \"inches\"),  #>     just = c(\"left\", \"bottom\"), width = grid::unit(1, \"npc\") -  #>         grid::unit(1, \"inches\") - grid::unit(1, \"inches\"), height = grid::unit(1,  #>         \"npc\") - grid::unit(1, \"inches\") - grid::unit(1.23, \"inches\"),  #>     gp = grid::gpar(fill = \"transparent\", col = \"black\", lty = \"solid\",  #>         lwd = 1, cex = 1, fontsize = 9, lineheight = 0.95, fontfamily = \"serif\",  #>         alpha = 1, lineend = \"round\", linejoin = \"round\", linemitre = 10,  #>         lex = 1, fontface = 1L), layout = grid::grid.layout(nrow = 14L,  #>         ncol = 3L, heights = grid::unit(c(0.34, 0.34, 0.34, 0.34,  #>         0.34, 0.34, 0.34, 0.34, 0.34, 1, 0.34, 1, 0.34, 0.34),  #>             c(\"cm\", \"cm\", \"cm\", \"cm\", \"cm\", \"cm\", \"cm\", \"cm\",  #>             \"cm\", \"null\", \"cm\", \"lines\", \"cm\", \"cm\")), widths = grid::unit(c(0.33,  #>         0.33, 0.33), c(\"npc\", \"npc\", \"npc\"))))))) #> attr(,\"env\") #> <environment: 0x558b6b958938>"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"example-with-a-table","dir":"Articles","previous_headings":"","what":"Example with a Table","title":"Get Started with gridify","text":"quick example README, using gt table:  wraps gt table pharma-style layout, placing headers footers around .","code":"library(gt)  tab <- gt::gt(head(mtcars)) %>%   gt::tab_options(     table.width = gt::pct(100),     data_row.padding = gt::px(10),     table_body.hlines.color = \"white\",     table.font.size = 12   )  gridify(   object = tab,   layout = pharma_layout_base() ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"title_1\", \"Table Title\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>\") %>%   set_cell(\"footer_right\", \"Page 1 of 1\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left_1: filled #>   header_left_2: empty #>   header_left_3: empty #>   header_right_1: filled #>   header_right_2: empty #>   header_right_3: empty #>   output_num: empty #>   title_1: filled #>   title_2: empty #>   title_3: empty #>   by_line: empty #>   note: empty #>   references: empty #>   footer_left: filled #>   footer_right: filled #>   watermark: empty"},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"saving-your-output","dir":"Articles","previous_headings":"","what":"Saving Your Output","title":"Get Started with gridify","text":"save gridify drawings files see vignette(\"simple_examples\", package = \"gridify\").","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"more-resources","dir":"Articles","previous_headings":"","what":"More Resources","title":"Get Started with gridify","text":"Simple Examples: vignette(\"simple_examples\", package = \"gridify\") Complex Examples: vignette(\"multi_page_examples\", package = \"gridify\") Custom Layout: vignette(\"create_custom_layout\", package = \"gridify\") Transparency: vignette(\"transparency\", package = \"gridify\")","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/gridify.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Get Started with gridify","text":"’s ! gridify enables consistently position text elements around figures tables, letting leverage base R grid maximum control transparency. defining customizing layout , can reuse across multiple outputs—saving time ensuring consistency.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multi-Page and Multi-Figure Examples","text":"document discusses advanced uses gridify, automate generation multiple figures tables. recommended start vignette(\"gridify\", package = \"gridify\") vignette(\"simple_examples\", package = \"gridify\"), continuing vignette. magrittr ggplot2 packages useful examples.","code":"library(gridify) library(magrittr) library(ggplot2)"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"figures","dir":"Articles","previous_headings":"Introduction","what":"Figures","title":"Multi-Page and Multi-Figure Examples","text":"section, discussing method automate generation multiple figures data visualization. code provided written R uses ggplot2 gridify libraries. process involves: Defining necessary data Creating function generate figure Using loops create save output, sprintf() template text elements strategy particularly useful large number figures generate share common text elements.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"multiple-figure-delivery-with-a-for-loop-and-sprintf","dir":"Articles","previous_headings":"Introduction > Figures","what":"Multiple Figure Delivery with a for-loop and sprintf","title":"Multi-Page and Multi-Figure Examples","text":"creating multiple figures , can useful metadata relating cell text list help automate process adding titles, footers, etc. via dataset created code, separate file read , e.g. excel file. example , created dummy metadata based mtcars dataset. elements global apply figures, others figure specific listed individually. already dataset, excel file, can process file get proper list. add additional columns file help build figure. helpful create figure-generating function arguments affect elements output, example : want collect figures separate list. , variable figures_list container outputs. Optionally, set global variables, usually defined top script. Now can run -loop generate many gridify objects. .Rmd .Qmd documents considered alternatives saving gridify objects, can used directly Rmd Qmd documents, similar gridify package vignettes. can generate PDF figure individually combine software like Acrobat. can generate single PDF file figures.","code":"figures_data <- list(   global = list(     project = \"My Project\",     indication = \"My Indication\",     study = \"My Study\",     cutoff = \"Data Cut-off: YYYY-MM-DD\",     program = \"program1.R\",     var1 = \"mpg\",     note1 = \"Note: Violin figure: compact display of continuous distribution; it is a blend of boxplot and density,     the latter based on a Gaussian kernel estimator.\",     note2 = \"Note: Placebo subjects switched to Study Drug at/after Week 16.\",     note3 = \"Note: Total Study Drug includes subjects randomized to Placebo and to Study Drug.\",     note4 = \"Note: N denotes the treatment population and n denotes the contributing population for     the analysis for each treatment, parameter and visit\"   ),   figures = list(     figure1 = list(       number = \"1.1\",       title1 = \"My title Group A\",       title2 = \"My title 2\",       var2 = \"wt\"     ),     figure2 = list(       number = \"1.2\",       title1 = \"My Title Group B\",       title2 = \"My title 2\",       var2 = \"cyl\"     )   ) ) library(readxl)  dat <- readxl::read_excel(\"PATH TO YOUR FILE\") figures <- lapply(seq_len(nrow(dat)), function(row) dat[row, ]) # Optionally, you can add names to the elements of 'figures' so you won't have to subset by index later names(figures) <- paste0(\"figure\", seq_along(figures)) # Alternatively, you can leave the 'dat' object as it is and loop through its rows, # or with row names if available generate_figure <- function(data, var1, var2) {   ggplot2::ggplot(data, ggplot2::aes(x = !!as.name(var1), y = !!as.name(var2))) +     ggplot2::geom_line() } figures_list <- list() COMPANY <- \"My Company\" STATUS <- \"DRAFT\" for (figure_index in seq_along(figures_data$figures)) {   figure_obj <- generate_figure(mtcars, figures_data$global$var1, figures_data$figures[[figure_index]]$var2)    # Add text elements using `sprintf()`   gridify_obj <- gridify(     object = figure_obj,     layout = pharma_layout_A4()   ) %>%     # Add STATIC text elements to the `gridify` object     # You can define these values as variables at the top of your script     set_cell(\"header_left_1\", COMPANY) %>%     set_cell(\"watermark\", toupper(STATUS)) %>%     set_cell(\"header_right_2\", STATUS) %>%     # Add VARIABLE text elements to the gridify object     set_cell(\"header_left_2\", sprintf(\"%s / %s\", figures_data$global$project, figures_data$global$indication)) %>%     set_cell(\"header_left_3\", figures_data$global$study) %>%     set_cell(\"header_right_3\", sprintf(\"%s\", figures_data$global$cutoff)) %>%     set_cell(\"output_num\", sprintf(\"Output %s\", figures_data$figures[[figure_index]]$number)) %>%     set_cell(\"title_1\", figures_data$figures[[figure_index]]$title1) %>%     set_cell(\"title_2\", figures_data$figures[[figure_index]]$title2) %>%     set_cell(\"note\", paste(figures_data$global[c(\"note1\", \"note2\", \"note3\", \"note4\")], collapse = \"\\n\")) %>%     set_cell(\"footer_left\", sprintf(\"Program: %s, %s\", figures_data$global$program, Sys.time())) %>%     set_cell(\"footer_right\", sprintf(\"Page %s of %s\", figure_index, length(figures_data$figures)))    figures_list[[figure_index]] <- gridify_obj } if (!dir.exists(\"figures\")) {   dir.create(\"figures\") } export_to(   figures_list,   sprintf(\"./figures/test_Company_A4_layout_%s.pdf\", seq_along(figures_list)) ) export_to(   figures_list,   \"./figures/test_multi_Company_A4_layout.pdf\" )"},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"for-pdfdocx","dir":"Articles","previous_headings":"Introduction > Tables","what":"For PDF/DOCX","title":"Multi-Page and Multi-Figure Examples","text":"Large tables can difficult display single page, shrunken dimensions making hard read interpret. gridify, combination gt package, solves allowing split tables based row limits, helping maintain professional format. example practice creating outputs pdf/docx files.","code":"library(gt)"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"splitting-by-rows-for-pdf-or-docx","dir":"Articles","previous_headings":"Introduction > Tables","what":"Splitting By Rows for PDF or DOCX","title":"Multi-Page and Multi-Figure Examples","text":"dealing extensive table, displaying data single page can make difficult read. splitting table based number rows effective solution. Let’s see can implemented. First, specify different features want output . Next, divide original data frame smaller tables.","code":"table_cols <- c(\"cyl\", \"vs\", \"am\", \"drat\", \"qsec\") # Columns that appear in final output df <- mtcars[, table_cols] rows_per_page <- 10 row_height_pixels <- 10 font_size <- 12 font_type <- \"serif\"  number_of_rows <- nrow(df) number_of_cols <- ncol(df) number_of_pages <- ceiling(number_of_rows / rows_per_page) # Allocate each row to a page df$page_number <- rep(   1:number_of_pages,   each = rows_per_page,   length.out = number_of_rows )  # Split original table into smaller pages pages <- split(   df,   df$page_number )"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"optional---fill-last-table-with-empty-rows","dir":"Articles","previous_headings":"Introduction > Tables","what":"OPTIONAL - Fill last table with empty rows","title":"Multi-Page and Multi-Figure Examples","text":"last table doesn’t meet rows_per_page specification, appear placed middle page. placed top, following code add empty rows last table rows_per_page rows. Finally, generate page output, converting table gtable gt package looping gridify function.","code":"last_page <- pages[[number_of_pages]] last_page_nrows <- nrow(last_page) if (last_page_nrows < rows_per_page) {   rows_difference <- rows_per_page - last_page_nrows   append_table <- data.frame(matrix(\" \", nrow = rows_difference, ncol = ncol(df)))   colnames(append_table) <- colnames(df)   pages[[number_of_pages]] <- rbind(last_page, append_table) } results_list <- list() for (iter in seq_along(pages)) {   gt_input <- gt(pages[[iter]]) %>%     tab_options(       table.width = pct(100),       data_row.padding = px(row_height_pixels),       table_body.hlines.color = \"white\",       page.numbering = TRUE,       table.font.size = font_size,       table.font.names = font_type     )    results_list[[iter]] <- gridify(     gt_input,     layout = pharma_layout_A4()   ) %>%     set_cell(\"header_left_1\", \"My Company\") %>%     set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%     set_cell(\"header_left_3\", \"<STUDY>\") %>%     set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%     set_cell(\"header_right_2\", \"<Draft or Final>\") %>%     set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") %>%     set_cell(\"output_num\", \"<Output> xx.xx.xx\") %>%     set_cell(\"title_1\", \"<Title 1>\") %>%     set_cell(\"title_2\", \"<Title 2>\") %>%     set_cell(\"title_3\", \"<Optional Title 3>\") %>%     set_cell(\"note\", \"<Note or Footnotes>\") %>%     set_cell(\"references\", \"<References:>\") %>%     set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%     set_cell(\"footer_right\", paste0(\"Page \", iter, \" of \", number_of_pages)) %>%     set_cell(\"watermark\", \"DRAFT\") }  print(results_list[[1]])"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"export-to-pdf-jpg-and-png","dir":"Articles","previous_headings":"Introduction > Tables","what":"Export To PDF, JPG and PNG","title":"Multi-Page and Multi-Figure Examples","text":"gridify supports three file types export_to(): PDF, JPG, PNG. Using result previous example, first argument export_to() either gridify object list , second either desired file path (including file name) vector .","code":"if (!dir.exists(\"tables\")) {   dir.create(\"tables\") }"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"multi-page-outputs-","dir":"Articles","previous_headings":"Introduction > Tables > Export To PDF, JPG and PNG","what":"Multi-page outputs.","title":"Multi-Page and Multi-Figure Examples","text":"multi-page outputs, PDFs convenient use. mentioned earlier, Rmd Qmd documents alternatives saving gridify objects, can saved directly .Rmd .Qmd documents. export PNG JPG, two options:","code":"export_to(   results_list,   to = \"./tables/multipageA4.pdf\" )  export_to(   results_list,   to = \"./tables/multipageA4portrait.pdf\",   width = 8.3,   height = 11.7 )"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"export-a-single-image","dir":"Articles","previous_headings":"Introduction > Tables > Export To PDF, JPG and PNG","what":"1. Export a single image","title":"Multi-Page and Multi-Figure Examples","text":"done providing single name .","code":"export_to(   results_list[[1]],   to = \"./tables/singlepage.png\",   width = 2400,   height = 2000,   res = 300 )  export_to(   results_list[[1]],   to = \"./tables/singlepage.jpg\",   width = 2400,   height = 2000,   res = 300 )"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"export-multiple-images","dir":"Articles","previous_headings":"Introduction > Tables > Export To PDF, JPG and PNG","what":"2. Export multiple images","title":"Multi-Page and Multi-Figure Examples","text":"done providing list names . lengths names vector gridify input must .","code":"export_to(   results_list,   to = file.path(\"./tables\", sprintf(\"singlepage%s.png\", seq_along(results_list))),   width = 2400,   height = 2000,   res = 300 )  export_to(   results_list,   to = file.path(\"./tables\", sprintf(\"singlepage%s.jpg\", seq_along(results_list))),   width = 2400,   height = 2000,   res = 300 )  export_to(   results_list,   to = file.path(\"./tables\", sprintf(\"singlepage%s.pdf\", seq_along(results_list))),   width = 2400,   height = 2000,   res = 300 )"},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"extending-the-multi-page-example","dir":"Articles","previous_headings":"Introduction > Tables","what":"Extending The Multi-Page Example","title":"Multi-Page and Multi-Figure Examples","text":"pharmaceutical industries, presenting tables often requires customization meet reporting standards. splitting rows common approach handling large datasets, option. potential ways table split , gridify used generate new page table: Group columns: Create separate tables unique combination selected columns, treatment groups, geographic regions, product categories. Split columns: dealing wide datasets, distribute columns across multiple tables improve readability, separating different performance metrics variable types. Retain key column: Ensure essential identifiers (e.g., PatientID TransactionID) appear every page easy reference consistency. methods provide greater flexibility structuring tables, making easier interpret align diverse reporting needs across industries.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/multi_page_examples.html","id":"long-table-in-html","dir":"Articles","previous_headings":"Introduction > Tables","what":"Long Table in HTML","title":"Multi-Page and Multi-Figure Examples","text":"rendering .Rmd .Qmd document HTML, using ‘fixed’ scale measurements heights essential prevent excessive scrolling content cut . Additionally, layout margins defined absolute units, inches, cm mm. trying find perfect fig.width fig.height output, instead guessing, can use binary search method quickly find ideal height. example: Start range (e.g., 20 120 inches). Test midpoint: Try 70 inches (average 20 120). Adjust based results: 70 inches tall, reduce value 45 inches (average 20 70); short, increase 95 inches (average 70 120). Repeat process Keep refining quickly find optimal height. R code fig.width = 8 fig.height = 45. Note pharma_layout_letter using default heights (similar \"fixed\" scales) margins \"inches\".","code":"gt_obj <- gt::gt(Theoph)  g <- gridify(   object = gt_obj,   layout = pharma_layout_letter() ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Table> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simple Examples","text":"document provides simple examples illustrate use gridify add headers, footers figures tables. cover use simple_layout(), complex_layout(), pharma_layout_base(), pharma_layout_A4() pharma_layout_letter(), show add layouts ggplot2 figures, base R figures, flextables, gt tables. gridify support rtables directly, demonstrate users can implement gridify rtables converting flextables.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"examples-with-figures","dir":"Articles","previous_headings":"","what":"Examples with Figures","title":"Simple Examples","text":"can use gridify ggplot2 figures base R figures.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"precedence-of-operators","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures","what":"Precedence of Operators","title":"Simple Examples","text":"using ggplot2 package conjunction pipes (%>% native |>), ’s important understand precedence operators ensure code works expected. R, pipe operator (%>% |>) higher precedence addition operator (+) used ggplot2. means %>% |> operator evaluated + operator. , ’re piping ggplot2 call, need wrap brackets () {}. ensures entire ggplot2 call evaluated first, result passed next function pipe. ’s example:","code":"# Load the necessary libraries library(ggplot2) # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  # Create a scatter plot mtcars %>%   {     ggplot2::ggplot(., aes(x = mpg, y = wt)) +       ggplot2::geom_point()   } %>%   print()"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"simple-layout-example","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures","what":"Simple Layout Example","title":"Simple Examples","text":"create line plot mpg wt using mtcars dataset. use gridify() function apply simple_layout(). Next, use set_cell() function add title footer figure printing .","code":"library(gridify) fig_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line() g <- gridify(fig_obj, layout = simple_layout()) g <- g %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"footer\", \"Footer\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"complex-layout-example","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures","what":"Complex Layout Example","title":"Simple Examples","text":"create line plot mpg wt using mtcars dataset. use gridify() apply complex_layout().","code":"fig_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line() g <- gridify(fig_obj, layout = complex_layout()) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"pharma-layout-examples","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures","what":"Pharma Layout Examples","title":"Simple Examples","text":"Pharma layout base, letter, A4 specific layouts pharmaceutical outputs provided gridify package. identical predefined cells headers, footers, titles, subtitles, notes, watermarks, references. cells set default can overwritten.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"pharma-layout-base-example","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures > Pharma Layout Examples","what":"Pharma Layout Base Example","title":"Simple Examples","text":"create line plot mpg wt using mtcars dataset. use gridify() function apply pharma_layout_base().","code":"figure_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  g <- gridify(object = figure_obj, layout = pharma_layout_base()) %>%   set_cell(\"header_left_1\", \"Left Header 1\") %>%   set_cell(\"header_left_2\", \"Left Header 2\") %>%   set_cell(\"header_left_3\", \"Left Header 3\") %>%   set_cell(\"header_right_1\", \"Right Header 1\") %>%   set_cell(\"header_right_2\", \"Right Header 2\") %>%   set_cell(\"header_right_3\", \"Right Header 3\") %>%   set_cell(\"output_num\", \"Output\") %>%   set_cell(\"title_1\", \"Title 1\") %>%   set_cell(\"title_2\", \"Title 2\") %>%   set_cell(\"title_3\", \"Title 3\") %>%   set_cell(\"by_line\", \"By Line\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"references\", \"References\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\") %>%   set_cell(\"watermark\", \"Watermark\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"pharma-layout-letter-example","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures > Pharma Layout Examples","what":"Pharma Layout Letter Example","title":"Simple Examples","text":"apply pharma_layout_letter() just main cells filled .","code":"figure_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  g <- gridify(object = figure_obj, layout = pharma_layout_letter()) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Figure> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"Draft\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"pharma-layout-a4-example","dir":"Articles","previous_headings":"Examples with Figures > Examples with ggplot2 Figures > Pharma Layout Examples","what":"Pharma Layout A4 Example","title":"Simple Examples","text":"apply pharma_layout_A4() prior example. Note difference margin right A4 sized output.","code":"figure_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  g <- gridify(object = figure_obj, layout = pharma_layout_A4()) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Figure> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"Draft\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"example-with-a-base-r-figure","dir":"Articles","previous_headings":"Examples with Figures","what":"Example with a Base R Figure","title":"Simple Examples","text":"gridify package can also used base R figures. use base R figures gridify, first convert formula using ~, passing gridify(). example, create simple base R bar plot convert formula using ~. pass formula gridify() apply complex_layout().","code":"formula_object <- ~ barplot(1:10) g <- gridify(object = formula_object, layout = complex_layout()) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\") #> Loading required namespace: gridGraphics  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"examples-with-tables","dir":"Articles","previous_headings":"","what":"Examples with Tables","title":"Simple Examples","text":"can add text elements using previously mentioned layouts flextable gt tables using gridify. rtables objects directly supported gridify, can use gridify rtables first converting flextables.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"example-with-a-flextable","dir":"Articles","previous_headings":"Examples with Tables","what":"Example with a flextable","title":"Simple Examples","text":"create flextable using mtcars dataset. pass table gridify() apply pharma_layout_letter().","code":"# (to use `gridify` with flextables we require the function `as_grob()` to convert flextables into grob # objects, which exists in versions >= 0.8.0 of `flextable`)  library(flextable)  ft <- flextable::flextable(head(mtcars[1:10])) g <- gridify(object = ft, layout = pharma_layout_letter()) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Table> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"example-with-a-gt-table","dir":"Articles","previous_headings":"Examples with Tables","what":"Example with a gt Table","title":"Simple Examples","text":"create gt table using mtcars dataset. pass table gridify() apply pharma_layout_letter().","code":"# (to use `gridify` with gt tables we require the function `as_gtable()` to convert gt tables into # grob objects, which exists in versions >= 0.11.0 of `gt`)  library(gt)  gt_obj <- gt::gt(head(mtcars[1:10])) g <- gridify(object = gt_obj, layout = pharma_layout_letter()) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Table> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"example-with-an-rtable-via-flextable-conversion","dir":"Articles","previous_headings":"Examples with Tables","what":"Example with an rtable via flextable conversion","title":"Simple Examples","text":"demonstrate use gridify rtables converting rtable flextable modifying aesthetics. build simple rtable using iris dataset. convert rtable flextable using function tt_to_flextable() rtables.officer package. specify theme = NULL prevent addition borders tt_to_flextable() adds default. Next adjust aesthetics flextable. Finally pass flextable gridify() apply pharma_layout_A4(), printing table.","code":"library(rtables) rtabl <- rtables::basic_table(main_footer = \" \") %>%   rtables::split_cols_by(\"Species\") %>%   rtables::analyze(     c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\"),     function(x, ...) {       rtables::in_rows(         \"Mean (sd)\" = c(mean(x), stats::sd(x)),         \"Median\" = median(x),         \"Min - Max\" = range(x),         .formats = c(\"xx.xx (xx.xx)\", \"xx.xx\", \"xx.xx - xx.xx\")       )     }   ) %>%   rtables::build_table(iris) library(rtables.officer) #> Loading required package: rlistings #> Loading required package: tibble  ft <- rtables.officer::tt_to_flextable(rtabl, theme = NULL) ft <- flextable::font(ft, fontname = \"serif\", part = \"all\") g <- gridify(ft, layout = pharma_layout_A4()) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"PROJECT\") %>%   set_cell(\"header_left_3\", \"STUDY\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"header_right_2\", \"Draft\") %>%   set_cell(\"header_right_3\", \"Data Cut-off: 2000-01-01\") %>%   set_cell(\"output_num\", \"<Table> xx.xx.xx\") %>%   set_cell(\"title_1\", \"Summary Table for Iris Dataset\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"references\", \"References\") %>%   set_cell(\"footer_left\", sprintf(\"Program: My Programme, %s at %s\", Sys.Date(), format(Sys.time(), \"%H:%M\"))) %>%   set_cell(\"footer_right\", \"Page 1 of 1\") %>%   set_cell(\"watermark\", \"DRAFT\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"using-the-show-methods","dir":"Articles","previous_headings":"","what":"Using the show() Methods","title":"Simple Examples","text":"using gridify, can utilize show() methods find information cells available gridify object specifications layout object. take earlier example applied simple_layout() line plot. access available cells gridify object, can use show() method. Alternatively, can simply evaluate object. display cells included applied layout, whether filled gridify object.  stated console output example, can use show_spec(g) gain insight specifications g’s layout. can simple_layout() (layout) want view specs. Note: effectively calling show_spec(simple_layout).","code":"fig_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  g <- gridify(fig_obj, layout = simple_layout()) show(g) g #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: empty #>   footer: empty show_spec(g) #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 1 null #>   Row 3: 0 lines #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0, simple_layout() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 1 null #>   Row 3: 0 lines #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   transparent #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"graphical-parameters","dir":"Articles","previous_headings":"","what":"Graphical Parameters","title":"Simple Examples","text":"Within every layout function, can set global graphical parameters text elements default graphical parameters individual text elements. can use show_spec() function see global default graphical parameters set. can alter individual graphical parameters using set_cell() function. Setting value individual level supersedes global level. specified function calls, defaults within gridify function used. Please read Default Graphical Parameters vignette(\"create_custom_layout\", package = \"gridify\"). see available graphical parameters view grid::gpar documentation.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"global-and-individual-graphical-parameters-example","dir":"Articles","previous_headings":"Graphical Parameters","what":"Global and Individual Graphical Parameters Example","title":"Simple Examples","text":"example set global graphical parameters complex layout. set font colour \"navy\", font size 12. Now set individual graphical parameters right_header. set font colour \"purple\" font size 20.","code":"figure_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  g <- gridify(object = figure_obj, layout = complex_layout(global_gpar = grid::gpar(col = \"navy\", fontsize = 12))) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\") g <- g %>%   set_cell(\"header_right\", \"Right Header\", gpar = grid::gpar(col = \"purple\", fontsize = 20))  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"background-colour-example","dir":"Articles","previous_headings":"","what":"Background Colour Example","title":"Simple Examples","text":"example set background colour using background argument simple_layout(). default, uses grid::get.gpar()$fill (white background). example, set background colour \"beige\". background argument works across built-layout functions, including simple_layout(), complex_layout(), pharma_layout_base(), pharma_layout_A4(), pharma_layout_letter(). can also applied custom layouts create (vignette(\"create_custom_layout\", package = \"gridify\")). Note: using ggplot2, may also need set plot’s background colour match layout’s background.","code":"figure_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::theme(     plot.background = ggplot2::element_rect(fill = \"beige\", colour = NA),  # Entire plot background     panel.background = ggplot2::element_rect(fill = \"beige\", colour = NA),     # Panel (where data is plotted)     panel.border = ggplot2::element_rect(colour = \"black\", fill = NA)   ) +   ggplot2::geom_line()  g <- gridify(figure_obj, layout = simple_layout(background = \"beige\")) %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"footer\", \"Footer\")  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"set_cell-arguments","dir":"Articles","previous_headings":"","what":"set_cell() Arguments","title":"Simple Examples","text":"well adjusting individual graphical parameters shown , can also use set_cell() customise various features maximum characters per line, position, rotation text elements.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"maximum-characters","dir":"Articles","previous_headings":"set_cell() Arguments","what":"Maximum Characters","title":"Simple Examples","text":"can specify maximum number characters per line using argument mch. useful wrapping long strings across multiple lines. example figure simple_layout() applied. set footer long string, set maximum number characters per line 45 using mch argument.","code":"figure_obj <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  long_footer_string <- paste0(   \"This is a footer. We can have a long description here.\",   \"We can have another long description here.\",   \"We can have another long description here.\" )  g <- gridify(figure_obj, layout = simple_layout()) %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"footer\", long_footer_string, mch = 45)  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"position-and-rotation","dir":"Articles","previous_headings":"set_cell() Arguments","what":"Position and Rotation","title":"Simple Examples","text":"can also use set_cell() adjust position rotation text elements: x y define x y coordinates text element. example x = 0 places element far left x = 1 far right. hjust vjust control text element anchored relative x y point. instance: hjust = 0 aligns left edge element x. hjust = 0.5 centers element x. hjust = 1 aligns right edge element x. vjust works similar way y. vjust = 0 aligns bottom edge element y. vjust = 0.5 centers element y. vjust = 1 aligns top edge element y. rot sets rotation angle text element degrees, applied anticlockwise x-axis. x, y, hjust, vjust take values 0 1. now take previous example apply x = 0, hjust = 0, rot = 5 footer. aligns left edge footer left corner cell, rotation 5 degrees.","code":"g <- gridify(figure_obj, layout = simple_layout()) %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"footer\", long_footer_string, mch = 45, x = 0, hjust = 0, rot = 5)  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"altering-scales-and-adjusting-dimensions","dir":"Articles","previous_headings":"","what":"Altering Scales and Adjusting Dimensions","title":"Simple Examples","text":"using simple_layout() complex_layout() functions, optional scales argument can either \"fixed\" (default) \"free\". \"fixed\" scale ensures cells text elements (titles, footers, etc.) retain static height, figure / table taking remaining space. prevents text overlap maintaining structured layout, may result different height proportions text elements output. \"free\" scale sets heights cells proportional size output. example figure complex_layout() default scales = \"fixed\" applied.  apply scales = \"free\" text elements scale dynamically, may cause overlap output space small.  working .Rmd .Qmd files, can also remove text overlap scales = \"free\" adjusting knitr options fig.width fig.height expand output.  exporting .pdf, .png .jpeg can remove text overlap adjusting width height whilst using export_to() function. explained detail section Exporting PDF, PNG, TIFF, JPEG .","code":"fixed_scales_g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"subtitle\", \"Subtitle\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"note\", \"Note\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"footer_left\", \"Left Footer\", hjust = 1, vjust = 0.5, gpar = grid::gpar(fontsize = 10)) %>%   set_cell(\"footer_middle\", \"Middle Footer\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"footer_right\", \"Right Footer\", hjust = 0, vjust = 0.5, gpar = grid::gpar(fontsize = 10))  print(fixed_scales_g) free_scales_g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout(scales = \"free\") ) %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"subtitle\", \"Subtitle\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"note\", \"Note\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"footer_left\", \"Left Footer\", hjust = 1, vjust = 0.5, gpar = grid::gpar(fontsize = 10)) %>%   set_cell(\"footer_middle\", \"Middle Footer\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"footer_right\", \"Right Footer\", hjust = 0, vjust = 0.5, gpar = grid::gpar(fontsize = 10))  print(free_scales_g) print(free_scales_g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"adjusting-the-height-of-rows-using-global-options","dir":"Articles","previous_headings":"Altering Scales and Adjusting Dimensions","what":"Adjusting the Height of Rows using Global Options","title":"Simple Examples","text":"gridify provides two global options (gridify.adjust_height.default gridify.adjust_height.line) adjusting row heights layouts, based measurement height units adjust_height (layout argument) equals TRUE. recommended set options unless truly needed, may lead inconsistencies projects.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"how-these-options-work","dir":"Articles","previous_headings":"Altering Scales and Adjusting Dimensions > Adjusting the Height of Rows using Global Options","what":"How These Options Work","title":"Simple Examples","text":"default: non-line units (\"cm\", \"inches\", \"mm\"), row heights adjusted 0.25. line-based units (\"lines\"), row heights adjusted 0.10. values can increased create spacing text elements using following global options: gridify.adjust_height.default – applies row heights \"cm\", \"inches\", \"mm\". gridify.adjust_height.line – applies row heights \"lines\". Please note options affect row unit \"npc\", row height defined measurement percentage available height. options work height units \"cm\", \"inch\", \"mm\", \"lines\" adjust_height argument equals TRUE. simple_layout() complex_layout(): scales = \"free\", height unit \"npc\" (supported either adjustment option). scales = \"fixed\" (default), height unit \"lines\", making gridify.adjust_height.line applicable. adjust_height always set TRUE within function code. pharma_layout_base(), pharma_layout_letter() pharma_layout_A4(): height unit \"lines\", making gridify.adjust_height.line applicable. adjust_height argument TRUE default, users set argument. summary, gridify.adjust_height.line applicable predefined layouts, simple_layout() complex_layout(), scales = \"fixed\". contrast, gridify.adjust_height.default applicable predefined layout. can instead used custom layouts similar way gridify.adjust_height.line - see vignette(\"create_custom_layout\", package = \"gridify\").","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"examples-using-global-options","dir":"Articles","previous_headings":"Altering Scales and Adjusting Dimensions > Adjusting the Height of Rows using Global Options","what":"Examples using Global Options","title":"Simple Examples","text":"Example complex_layout() example use gridify.adjust_height.line complex_layout(). create gridify object applying complex_layout() scales = \"fixed\" line plot print object view default adjustments.  Now set gridify.adjust_height.line 0.7 using options() function. increases height rows space text elements.  Example pharma_layout_letter() example use gridify.adjust_height.line pharma_layout_letter(). set gridify.adjust_height.line option back default 0.1. create gridify object applying pharma_layout_letter() line plot.  Now set gridify.adjust_height.line 0.7.","code":"g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\")  print(g) options(gridify.adjust_height.line = 0.7)  print(g) options(gridify.adjust_height.line = 0.1)  g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = pharma_layout_letter() ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Figure> xx.xx.xx\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\")  print(g) options(gridify.adjust_height.line = 0.7)  print(g)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"exporting-section","dir":"Articles","previous_headings":"","what":"Export to PDF, PNG, TIFF, and JPEG","title":"Simple Examples","text":"can export gridify objects PDF, PNG, TIFF, JPEG files using export_to() function. example export gridify object PDF file. take earlier example applied pharma_layout_letter() line plot. pass gridify object export_to() function. specify desired file type name using argument. Instead just file name, argument can also set file path want change location file saved. export object PNG file, specify file name .png file extension. export object TIFF file, specify file name .tiff .tif file extension. Similarly, export object JPEG file, specify file name .jpeg .jpg file extension. can also modify characteristics width height passing export_to() argument.","code":"gridify_obj <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = pharma_layout_letter() ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"output_num\", \"<Figure> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"Draft\") export_to(gridify_obj, to = \"output.pdf\") export_to(gridify_obj, to = \"~/folder1/output.pdf\") export_to(gridify_obj, to = \"output.png\") export_to(gridify_obj, to = \"output.tiff\") export_to(gridify_obj, to = \"output.jpeg\", width = 2400, height = 1800, res = 300)"},{"path":"https://pharmaverse.github.io/gridify/articles/simple_examples.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Simple Examples","text":"examples give good understanding use gridify package add text elements simple figures tables. Remember, can customize layout text elements suit needs. Happy gridifying! see use gridify complex examples multi-page figures tables please check vignette(\"multi_page_examples\", package = \"gridify\"). need custom layout suited needs please check vignette(\"create_custom_layout\", package = \"gridify\").","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/transparency.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Transparency with gridify","text":"assumed already read vignettes understand gridify. gridify package simplifies creation complex grid-based layouts R. builds base R grid package, providing intuitive interface constructing advanced graphical arrangements—titles, headers, footers—without requiring deep knowledge grid . good introduction grid available . key strength gridify meta-programming approach: print assign gridify object, can retrieve inspect exact grid call code. helps ensure transparency can see precisely outputs composed. feature invaluable regulated industries environment need demonstrate output generated.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/transparency.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Transparency with gridify","text":"simple example showcasing gridify wraps ggplot2 figure headers, footers, additional text elements, exposing raw grid code used behind scenes:   graphics . call print() gridify object assign variable, gridify constructs returns grid call. meta-programming, gridify captures grid calls required produce graphics.","code":"library(gridify) # For the native pipe (|>), R 4.1.0 or higher is recommended. # Otherwise, you can use magrittr's %>%. library(magrittr)  library(ggplot2)  # Create and print a gridify object grid_call_behind <- gridify(   object = ggplot2::ggplot(     data = mtcars,     ggplot2::aes(x = mpg, y = wt)   ) +     ggplot2::geom_line(),   layout = complex_layout(scales = \"fixed\") ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\") %>%   print() # The underlying grid call is returned invisibly by the print() method. # We can inspect or store it for further manipulations: grid_call_behind #> grid::gTree(children = grid::gList(grid::rectGrob(x = 0, y = 0,  #>     width = 1, height = 1, just = c(\"left\", \"bottom\"), gp = grid::gpar(fill = \"transparent\",  #>         col = \"transparent\")), grid::gTree(children = do.call(grid::gList,  #>     list(grid::grobTree(grid::editGrob(OBJECT, vp = grid::viewport(height = grid::unit.pmax(grid::unit(1,  #>         \"npc\"), grid::unit(1, \"inch\")), width = grid::unit.pmax(grid::unit(1,  #>         \"npc\"), grid::unit(1, \"inch\")))), vp = grid::viewport(layout.pos.row = 4,  #>         layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"Left Header\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 1,  #>         layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"Middle Header\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 1,  #>         layout.pos.col = 2)), grid::grobTree(grid::textGrob(label = \"Right Header\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 1,  #>         layout.pos.col = 3)), grid::grobTree(grid::textGrob(label = \"Title\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 2,  #>         layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"Subtitle\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 3,  #>         layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"Note\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 5,  #>         layout.pos.col = c(1, 3))), grid::grobTree(grid::textGrob(label = \"Left Footer\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 6,  #>         layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"Middle Footer\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 6,  #>         layout.pos.col = 2)), grid::grobTree(grid::textGrob(label = \"Right Footer\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 6,  #>         layout.pos.col = 3)))), vp = grid::viewport(name = \"lyt\",  #>     x = grid::unit(0.1, \"npc\"), y = grid::unit(0.1, \"npc\"), just = c(\"left\",  #>         \"bottom\"), width = grid::unit(1, \"npc\") - grid::unit(0.1,  #>         \"npc\") - grid::unit(0.1, \"npc\"), height = grid::unit(1,  #>         \"npc\") - grid::unit(0.1, \"npc\") - grid::unit(0.1, \"npc\"),  #>     gp = grid::gpar(), layout = grid::grid.layout(nrow = 6L,  #>         ncol = 3L, heights = grid::unit(c(0.4, 0.4, 0.4, 1, 0.4,  #>         0.4), c(\"cm\", \"cm\", \"cm\", \"null\", \"cm\", \"cm\")), widths = grid::unit(c(0.33,  #>         0.33, 0.33), c(\"npc\", \"npc\", \"npc\"))))))) #> attr(,\"env\") #> <environment: 0x55744d002968> # Retrieve the main object- either a figure or table OBJECT <- attr(grid_call_behind, \"env\")[[\"OBJECT\"]] # Redraw the graphics by eval of the grid call grid::grid.draw(eval(grid_call_behind))"},{"path":"https://pharmaverse.github.io/gridify/articles/transparency.html","id":"key-transparency-benefits","dir":"Articles","previous_headings":"","what":"Key Transparency Benefits","title":"Transparency with gridify","text":"Direct Visibility Layout exposing raw grid code, gridify ensures can see exactly figures constructed. clear trail code especially helpful validating complex graphics meeting regulatory requirements. Educational Insight ’re interested learning grid works, can study generated code. ’s excellent, hands-way build knowledge low-level graphics R. Audit Debugging ability retrieve full grid calls makes straightforward diagnose layout issues confirm elements placed correctly.","code":""},{"path":"https://pharmaverse.github.io/gridify/articles/transparency.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Transparency with gridify","text":"providing direct access underlying grid code, gridify prioritizes transparency. details aspects like reproducibility, consistency, advanced layouts, check package documentation additional vignettes.","code":""},{"path":"https://pharmaverse.github.io/gridify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maciej Nasinski. Author, maintainer. Alexandra Wall. Author. Sarah Robson. Author. Pritish Dash. Author. Jennifer Winick-Ng. Author. Lily Nan. Contributor. Alphonse Kwizera. Contributor. Agota Bodoni. Contributor. Eilis Meldrum-Dolan. Contributor. Gary Cao. Contributor. UCB S.., Belgium. Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/gridify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nasinski M, Wall , Robson S, Dash P, Winick-Ng J (2025). gridify: Enrich Figures Tables Custom Headers Footers . R package version 0.7.4, https://pharmaverse.github.io/gridify/.","code":"@Manual{,   title = {gridify: Enrich Figures and Tables with Custom Headers and Footers and More},   author = {Maciej Nasinski and Alexandra Wall and Sarah Robson and Pritish Dash and Jennifer Winick-Ng},   year = {2025},   note = {R package version 0.7.4},   url = {https://pharmaverse.github.io/gridify/}, }"},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"pharmaceutical industry, many fields rely heavily data reporting, often need create figures tables specific graphical arrangements. titles, subtitles, captions, footnotes, text elements provide important context data shown. However, creating headers footers etc. correctly positioning around output can challenging, often requiring fine-tuning. can time-consuming can lead inconsistencies way figures tables presented across different projects. gridify builds base R grid package makes easy add flexible customizable information around figure table using pre-defined custom layout. gridify package works following input types, creating consistency using various different inputs: grob, gtable, ggplot, flextable, gt, base R plots (formula) Whilst rtables directly supported, can use rtables gridify first converting flextable. gridify based graphical tool grid, figure table inputs converted grob object gridify result using gridify always graphical image.","code":""},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"gridify yet CRAN, can install Pharmaverse GitHub (example):","code":"# install.packages(\"remotes\") remotes::install_github(\"pharmaverse/gridify\", build_manual = TRUE)"},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"workflow package follows: Create object (ggplot, gt etc.) Choose layout (predefined custom). Use get_layouts() see predefined options Use gridify() create gridify object Use set_cell() fill various text elements layout (headers, footers etc.) following example uses table created gt package gridify layout pharma_layout_base().  Note: Get image usingexport_to(gridify_object_fill, = \"mypng.png\", res = 300, width = 2300, height = 1900)","code":"library(gridify) # install.packages(\"gt\") # gt needs gtable # install.packages(\"gtable\") library(gt) # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr)  tab <- gt::gt(head(mtcars, n = 10))  |>   gt::tab_options(     table.width = gt::pct(100),     data_row.padding = gt::px(10),     table_body.hlines.color = \"white\",     table.font.size = 12   )  gridify_object <- gridify(   object = tab,   layout = pharma_layout_base(     margin = grid::unit(c(0.5, 0.5, 0.5, 0.5), \"inches\"),     global_gpar = grid::gpar(fontfamily = \"serif\", fontsize = 10)   ) )  gridify_object  gridify_object_fill <- gridify_object |>   set_cell(\"header_left_1\", \"My Company\") |>   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") |>   set_cell(\"header_left_3\", \"<STUDY>\") |>   set_cell(\"header_right_1\", \"CONFIDENTIAL\") |>   set_cell(\"header_right_2\", \"<Draft or Final>\") |>   set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") |>   set_cell(\"output_num\", \"<Table> xx.xx.xx\") |>   set_cell(\"title_1\", \"<Title 1>\") |>   set_cell(\"title_2\", \"<Title 2>\") |>   set_cell(\"title_3\", \"<Optional Title 3>\") |>   set_cell(\"by_line\", \"By: <GROUP>, <optionally: Demographic parameters>\") |>   set_cell(\"note\", \"<Note or Footnotes>\") |>   set_cell(\"references\", \"<References:>\") |>   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") |>   set_cell(\"footer_right\", \"Page xx of nn\") |>   set_cell(\"watermark\", \"DRAFT\")  gridify_object_fill  print(gridify_object_fill)"},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"documentation-guide","dir":"","previous_headings":"","what":"Documentation Guide","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"information please visit following vignettes: Getting Started vignette(\"gridify\", package = \"gridify\") - case study example constructed. Simple Examples vignette(\"simple_examples\", package = \"gridify\") - showcase implementations gridify various possible inputs. Multi-Page Examples vignette(\"multi_page_examples\", package = \"gridify\") - Showing use gridify complex situations e.g -loop multiple results. Create Custom Layout vignette(\"create_custom_layout\", package = \"gridify\") - explanation create custom layout use gridify. Transparency gridify vignette(\"transparency\", package = \"gridify\") - extract raw grid code reproduce gridify object.","code":""},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"packages exist add headers, footers, elements figures tables; input classes gridify already support features. However, gridify created supersede , used conjunction , way flexible use cases consistent across various inputs.","code":""},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"Interested contributing? Check contributing guidelines, CONTRIBUTING.md. Please note project released Code Conduct, CODE_OF_CONDUCT.md. contributing project, agree abide terms.","code":""},{"path":"https://pharmaverse.github.io/gridify/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Enrich Figures and Tables with Custom Headers and Footers and More","text":"Along authors contributors, thanks following people support: Alberto Montironi, Jonathan Bleier, Cynthia McShea, Nils Penard, Oswald Dallimore, Laetitia Lemoine, Daniel Vicencio Perez, Richard Abdy","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/coloured_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ANSI colour to a string — coloured_print","title":"Add ANSI colour to a string — coloured_print","text":"Add ANSI colour string","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/coloured_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ANSI colour to a string — coloured_print","text":"","code":"coloured_print(text, colour = \"green\")"},{"path":"https://pharmaverse.github.io/gridify/reference/coloured_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ANSI colour to a string — coloured_print","text":"text string colour colour (\"red\", \"green\", etc.) add. Defaults \"green\".","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/coloured_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ANSI colour to a string — coloured_print","text":"character string ANSI codes surrounding .","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Complex Layout for a gridify object — complex_layout","title":"Complex Layout for a gridify object — complex_layout","text":"function creates complex layout gridify object. layout consists six rows three columns headers, titles, notes footnotes around output.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complex Layout for a gridify object — complex_layout","text":"","code":"complex_layout(   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   scales = c(\"fixed\", \"free\") )"},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complex Layout for a gridify object — complex_layout","text":"margin unit object specifying margins around output. Default 10% output area sides. global_gpar gpar object specifying global graphical parameters. Must result call grid::gpar(). background string specifying background fill colour. Default grid::get.gpar()$fill white background. scales string, either \"free\" \"fixed\". default, \"fixed\" ensures text elements (titles, footers, etc.) retain static height, preventing text overlap maintaining structured layout. However, may result different height proportions text elements output. \"free\" option makes row heights proportional, allowing scale dynamically based overall output size. ensures text elements output maintain relative proportions.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complex Layout for a gridify object — complex_layout","text":"gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complex Layout for a gridify object — complex_layout","text":"layout consists six rows headers, titles, object (figure table), notes, footnotes. object placed fourth row. \"free\" scales, row heights 5%, 5%, 5%, 70%, 5%, 10% area, respectively. \"fixed\" scales, row heights adjusted number lines text elements around object, remaining area occupied object. Note reducing output space retain space text elements, making object appear smaller.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Complex Layout for a gridify object — complex_layout","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":"https://pharmaverse.github.io/gridify/reference/complex_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complex Layout for a gridify object — complex_layout","text":"","code":"complex_layout() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 6 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 0 lines #>   Row 3: 0 lines #>   Row 4: 1 null #>   Row 5: 0 lines #>   Row 6: 0 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 4 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 4: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_middle: #>     row:1, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_right: #>     row:1, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title: #>     row:2, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   subtitle: #>     row:3, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   note: #>     row:5, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_left: #>     row:6, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_middle: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_right: #>     row:6, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left: filled #>   header_middle: filled #>   header_right: filled #>   title: filled #>   subtitle: filled #>   note: filled #>   footer_left: filled #>   footer_middle: filled #>   footer_right: filled   gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout(margin = grid::unit(c(t = 0.2, r = 0.2, b = 0.2, l = 0.2), units = \"npc\")) ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left: filled #>   header_middle: empty #>   header_right: filled #>   title: filled #>   subtitle: empty #>   note: filled #>   footer_left: filled #>   footer_middle: empty #>   footer_right: empty   gridify(   object = gt::gt(head(mtcars)),   layout = complex_layout(     margin = grid::unit(c(t = 0.2, r = 0.2, b = 0.2, l = 0.2), units = \"npc\"),     global_gpar = grid::gpar(col = \"blue\", fontsize = 18)   ) ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left: filled #>   header_middle: empty #>   header_right: filled #>   title: filled #>   subtitle: empty #>   note: filled #>   footer_left: filled #>   footer_middle: empty #>   footer_right: empty"},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Export gridify objects to a file — export_to","title":"Export gridify objects to a file — export_to","text":"export_to() function exports gridifyClass object list objects specified file. Supported formats include PDF, PNG, TIFF JPEG. lists, single file name PDF file extension provided, objects combined multi-page PDF; character vector one file per object provided, object written corresponding file. possible create multi-page PNG JPEG files.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export gridify objects to a file — export_to","text":"","code":"export_to(x, to, device = NULL, ...)  # S4 method for class 'gridifyClass' export_to(x, to, device = NULL, ...)  # S4 method for class 'list' export_to(x, to, device = NULL, ...)  # S4 method for class 'ANY' export_to(x, to, device = NULL, ...)"},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export gridify objects to a file — export_to","text":"x gridifyClass object list gridifyClass objects. character string (vector) specifying output file name(s). extension determines output format. device function graphics device. default file name extension used choose graphics device function. Default NULL ... Additional arguments passed graphics device functions (pdf(), png(), tiff(), jpeg() custom one). Default width height export type, respectively: PDF: 11.69 inches x 8.27 inches PNG: 600 px x 400 px TIFF: 600 px x 400 px JPEG: 600 px x 400 px","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export gridify objects to a file — export_to","text":"value returned; function called side effect writing output file.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export gridify objects to a file — export_to","text":"PDF export, new device opened, grid printed using object's custom print method, device closed. PNG JPEG, device opened, new grid page started, grid printed, device closed. exporting list objects: single PDF file (length 1), function creates multi-page PDF. vector file names (one per object) provided, gridify object written corresponding file.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Export gridify objects to a file — export_to","text":"gridify objects can saved directly .Rmd .Qmd documents, just like gridify package vignettes. gt pct() issue Using pct() set width gt tables can unreliable exporting PDF. recommended use px() set width pixels instead.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/export_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export gridify objects to a file — export_to","text":"","code":"library(gridify) library(magrittr) library(ggplot2)  # Create a gridify object using a ggplot and a custom layout:  # Set text elements on various cells: gridify_obj <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = pharma_layout_base(     margin = grid::unit(c(0.5, 0.5, 0.5, 0.5), \"inches\"),     global_gpar = grid::gpar(fontfamily = \"serif\", fontsize = 10)   ) ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") %>%   set_cell(\"output_num\", \"<Output> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"title_3\", \"<Optional Title 3>\") %>%   set_cell(\"by_line\", \"By: <GROUP>, <optionally: Demographic parameters>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"DRAFT\")  # Export a result to different file types  # Different file export formats require specific capabilities in your R installation. # Use capabilities() to check which formats are supported in your R build.  # PNG temp_png_default <- tempfile(fileext = \".png\") export_to(   gridify_obj,   to = temp_png_default )  temp_png_custom <- tempfile(fileext = \".png\") export_to(   gridify_obj,   to = temp_png_custom,   width = 2400,   height = 1800,   res = 300 )  # JPEG temp_jpeg_default <- tempfile(fileext = \".jpeg\") export_to(   gridify_obj,   to = temp_jpeg_default )  temp_jpeg_custom <- tempfile(fileext = \".jpeg\") export_to(   gridify_obj,   to = temp_jpeg_custom,   width = 2400,   height = 1800,   res = 300 )  # TIFF temp_tiff_default <- tempfile(fileext = \".tiff\") export_to(   gridify_obj,   to = temp_tiff_default )  temp_tiff_custom <- tempfile(fileext = \".tiff\") export_to(   gridify_obj,   to = temp_tiff_custom,   width = 2400,   height = 1800,   res = 300 )  # PDF temp_pdf_A4 <- tempfile(fileext = \".pdf\") export_to(   gridify_obj,   to = temp_pdf_A4 )  temp_pdf_A4long <- tempfile(fileext = \".pdf\") export_to(   gridify_obj,   to = temp_pdf_A4long,   width = 8.3,   height = 11.7 )  # Use different pdf device - cairo_pdf temp_pdf_A4long_cairo <- tempfile(fileext = \".pdf\") export_to(   gridify_obj,   to = temp_pdf_A4long_cairo,   device = grDevices::cairo_pdf,   width = 8.3,   height = 11.7 )  # Multiple Objects - a list  gridify_list <- list(gridify_obj, gridify_obj)  temp_pdf_multipageA4 <- tempfile(fileext = \".pdf\") export_to(   gridify_list,   to = temp_pdf_multipageA4 )  temp_pdf_multipageA4long <- tempfile(fileext = \".pdf\") export_to(   gridify_list,   to = temp_pdf_multipageA4long,   width = 8.3,   height = 11.7 )  temp_png_multi <- c(tempfile(fileext = \".png\"), tempfile(fileext = \".png\")) export_to(   gridify_list,   to = temp_png_multi )  temp_png_multi_custom <- c(tempfile(fileext = \".png\"), tempfile(fileext = \".png\")) export_to(   gridify_list,   to = temp_png_multi_custom,   width = 800,   height = 600,   res = 96 )"},{"path":"https://pharmaverse.github.io/gridify/reference/get_layouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the gridify layouts — get_layouts","title":"Get the gridify layouts — get_layouts","text":"Lists layout functions exported gridify package.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/get_layouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the gridify layouts — get_layouts","text":"","code":"get_layouts()"},{"path":"https://pharmaverse.github.io/gridify/reference/get_layouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the gridify layouts — get_layouts","text":"vector listing names layout functions gridify package.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/get_layouts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the gridify layouts — get_layouts","text":"","code":"get_layouts() #> [1] \"complex_layout\"       \"simple_layout\"        \"pharma_layout_base\"   #> [4] \"pharma_layout_A4\"     \"pharma_layout_letter\""},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Get grid::gpar arguments — gpar_args","title":"Get grid::gpar arguments — gpar_args","text":"Get grid::gpar arguments","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get grid::gpar arguments — gpar_args","text":"","code":"gpar_args(gpar)"},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get grid::gpar arguments — gpar_args","text":"gpar grid::gpar object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get grid::gpar arguments — gpar_args","text":"list.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert grid::gpar to a call — gpar_call","title":"Convert grid::gpar to a call — gpar_call","text":"Convert grid::gpar call","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert grid::gpar to a call — gpar_call","text":"","code":"gpar_call(gpar)"},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert grid::gpar to a call — gpar_call","text":"gpar grid::gpar object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gpar_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert grid::gpar to a call — gpar_call","text":"call.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/grid_unit_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for grid::unitType which supports older R versions — grid_unit_type","title":"Wrapper for grid::unitType which supports older R versions — grid_unit_type","text":"Wrapper grid::unitType supports older R versions","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/grid_unit_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for grid::unitType which supports older R versions — grid_unit_type","text":"","code":"grid_unit_type(x, use_grid = TRUE)"},{"path":"https://pharmaverse.github.io/gridify/reference/grid_unit_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for grid::unitType which supports older R versions — grid_unit_type","text":"x grid::unit use_grid means try call grid::unitType exists. main purpose argument full test coverage tests. Default TRUE.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/grid_unit_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for grid::unitType which supports older R versions — grid_unit_type","text":"character vector unit type element.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gridify object — gridify","title":"Create a gridify object — gridify","text":"function creates gridify object, represents object specific layout text elements around output. object can grob, ggplot2, gt, flextable, formula object. layout can gridifyLayout object function returns gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gridify object — gridify","text":"","code":"gridify(object = grid::nullGrob(), layout, elements = list(), ...)"},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gridify object — gridify","text":"object grob ggplot2, gt, flextable, formula object. Default grid::nullGrob(). layout gridifyLayout object function returns gridifyLayout object. can use predefined layouts; get_layouts() function prints names available layouts. can create layout, please read vignette(\"create_custom_layout\", package = \"gridify\") information. elements list text elements fill cells layout. Useful specific situations, please consider using set_cell method set text elements around output. Please note elements list specific structure, please see example. ... Additional arguments.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gridify object — gridify","text":"gridifyClass object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gridify object — gridify","text":"elements argument list elements fill cells, can used instead conjunction set_cell. Please access vignettes information gridify.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a gridify object — gridify","text":"setting text within elements argument, can add new lines using newline character, \\n. addition \\n may require setting smaller lineheight argument grid::gpar. layouts default scales = \"fixed\", layout automatically adjust fit new lines, ensuring elements overlap.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/gridify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gridify object — gridify","text":"","code":"library(magrittr) object <- ggplot2::ggplot(mtcars, ggplot2::aes(mpg, wt)) +   ggplot2::geom_point() gridify(   object = object,   layout = simple_layout() ) %>%   set_cell(\"title\", \"My Title\", gpar = grid::gpar(fontsize = 30)) %>%   set_cell(\"footer\", \"My Footer\", gpar = grid::gpar(fontsize = 10)) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled   gridify(   gt::gt(head(mtcars)),   layout = complex_layout(scales = \"fixed\") ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_middle\", \"Middle Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"subtitle\", \"Subtitle\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_middle\", \"Middle Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left: filled #>   header_middle: filled #>   header_right: filled #>   title: filled #>   subtitle: filled #>   note: filled #>   footer_left: filled #>   footer_middle: filled #>   footer_right: filled   # We encourage usage of set_cell but you can also use the elements argument # to set text elements around the output. gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout(),   elements = list(     title = list(text = \"My Title\", gpar = grid::gpar(fontsize = 30)),     footer = list(text = \"My Footer\", gpar = grid::gpar(fontsize = 10))   ) ) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell-class.html","id":null,"dir":"Reference","previous_headings":"","what":"gridifyCell class — gridifyCell-class","title":"gridifyCell class — gridifyCell-class","text":"Class creating cell used gridify layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"gridifyCell class — gridifyCell-class","text":"row numeric value, span sequence specifying range occupied rows cell. col numeric value, span sequence specifying range occupied columns cell. text character value specifying default text cell. mch numeric value specifying maximum number characters per line. functionality based strwrap function. default, avoids breaking words splits lines specified. x numeric value specifying x position text cell. y numeric value specifying y position text cell. hjust numeric value specifying horizontal position text cell, relative x value. vjust numeric value specifying vertical position text cell, relative y value. rot numeric value specifying rotation cell. gpar grid::gpar() object specifying graphical parameters cell.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gridifyCell — gridifyCell","title":"Create a gridifyCell — gridifyCell","text":"Function creating new instance gridifyCell class. Multiple gridifyCell objects inputs gridifyCells.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gridifyCell — gridifyCell","text":"","code":"gridifyCell(   row,   col,   text = character(0),   mch = Inf,   x = 0.5,   y = 0.5,   hjust = 0.5,   vjust = 0.5,   rot = 0,   gpar = grid::gpar() )"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gridifyCell — gridifyCell","text":"row numeric value, span sequence specifying range occupied rows cell. col numeric value, span sequence specifying range occupied columns cell. text character value specifying default text cell. Default character(0). mch numeric value specifying maximum number characters per line. functionality based strwrap function. default, avoids breaking words splits lines specified. Default Inf. x numeric value specifying x position text cell. Default 0.5. y numeric value specifying y position text cell. Default 0.5. hjust numeric value specifying horizontal position text cell, relative x value. Default 0.5. vjust numeric value specifying vertical position text cell, relative y value. Default 0.5. rot numeric value specifying rotation cell. Default 0. gpar grid::gpar() object specifying graphical parameters cell. Default grid::gpar().","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gridifyCell — gridifyCell","text":"instance gridifyCell class.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gridifyCell — gridifyCell","text":"","code":"cell <- gridifyCell(   row = 1,   col = 1:2,   text = \"Default cell text\",   mch = Inf,   x = 0.5,   y = 0.5,   hjust = 0.5,   vjust = 0.5,   rot = 0,   gpar = grid::gpar() )"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells-class.html","id":null,"dir":"Reference","previous_headings":"","what":"gridifyCells class — gridifyCells-class","title":"gridifyCells class — gridifyCells-class","text":"Class creating list cells gridify layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"gridifyCells class — gridifyCells-class","text":"cells list cell objects.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gridifyCells — gridifyCells","title":"Create a gridifyCells — gridifyCells","text":"Function creating new instance gridifyCells class. gridifyCells consists multiple gridifyCell objects input object gridifyLayout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gridifyCells — gridifyCells","text":"","code":"gridifyCells(...)"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gridifyCells — gridifyCells","text":"... Arguments passed new function create instance gridifyCells class. argument result call gridifyCell.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gridifyCells — gridifyCells","text":"instance gridifyCells class.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gridifyCells — gridifyCells","text":"","code":"cell1 <- gridifyCell(   row = 1,   col = 1,   x = 0.5,   y = 0.5,   hjust = 0.5,   vjust = 0.5,   rot = 0,   gpar = grid::gpar() ) cell2 <- gridifyCell(   row = 2,   col = 2,   x = 0.5,   y = 0.5,   hjust = 0.5,   vjust = 0.5,   rot = 0,   gpar = grid::gpar() ) cells <- gridifyCells(title = cell1, footer = cell2)"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyClass-class.html","id":null,"dir":"Reference","previous_headings":"","what":"gridifyClass class — gridifyClass-class","title":"gridifyClass class — gridifyClass-class","text":"Class creating gridify object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyClass-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"gridifyClass class — gridifyClass-class","text":"object grob like object. layout gridifyLayout object. elements list text elements, calls set_cell().","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout-class.html","id":null,"dir":"Reference","previous_headings":"","what":"gridifyLayout class — gridifyLayout-class","title":"gridifyLayout class — gridifyLayout-class","text":"Class creating layout gridify object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"gridifyLayout class — gridifyLayout-class","text":"nrow integer specifying number rows layout. ncol integer specifying number columns layout. heights grid::unit() call specifying heights rows. widths grid::unit() call specifying widths columns. margin grid::unit() specifying margins around object. global_gpar grid::gpar() object specifying global graphical parameters. background string background colour. adjust_height logical value indicating whether adjust height object. applies cells height defined cm, mm, inch lines units. object grob object. cells list cell objects.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gridifyLayout — gridifyLayout","title":"Create a gridifyLayout — gridifyLayout","text":"Function creating new instance gridifyLayout class.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gridifyLayout — gridifyLayout","text":"","code":"gridifyLayout(   nrow,   ncol,   heights,   widths,   margin,   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   adjust_height = TRUE,   object,   cells )"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gridifyLayout — gridifyLayout","text":"nrow integer specifying number rows layout. ncol integer specifying number columns layout. heights call grid::unit() specifying heights rows. widths call grid::unit() specifying widths columns. margin grid::unit() specifying margins around object. Must vector length 4, one element margin, values order top, right, bottom, left. global_gpar call grid::gpar() specifying global graphical parameters. Default grid::gpar(). background string background colour. Default grid::get.gpar()$fill. adjust_height logical value indicating whether automatically adjust height object make sure text elements around output overlap. applies rows height defined cm, mm, inch lines units. Default TRUE. object call gridifyObject specifying row column location object. cells call gridifyCells listing text element cells required layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gridifyLayout — gridifyLayout","text":"new instance gridifyLayout class.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gridifyLayout — gridifyLayout","text":"","code":"layout <- gridifyLayout(   nrow = 3L,   ncol = 1L,   heights = grid::unit(c(0.15, 0.7, 0.15), \"npc\"),   widths = grid::unit(1, \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   adjust_height = FALSE,   object = gridifyObject(row = 2, col = 1),   cells = gridifyCells(     title = gridifyCell(row = 1, col = 1),     footer = gridifyCell(row = 3, col = 1)   ) )  # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = layout ) %>%   set_cell(\"title\", \"TITLE\") %>%   set_cell(\"footer\", \"FOOTER\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled   new_layout <- function(     margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),     global_gpar = grid::gpar()) {   gridifyLayout(     nrow = 4L,     ncol = 1L,     heights = grid::unit(c(3, 0.5, 1, 3), c(\"cm\", \"cm\", \"null\", \"cm\")),     widths = grid::unit(1, \"npc\"),     global_gpar = global_gpar,     background = grid::get.gpar()$fill,     margin = margin,     adjust_height = FALSE,     object = gridifyObject(row = 3, col = 1),     cells = gridifyCells(       title = gridifyCell(row = 1, col = 1, text = \"Default Title\"),       subtitle = gridifyCell(row = 2, col = 1),       footer = gridifyCell(row = 4, col = 1)     )   ) } gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = new_layout() ) %>%   set_cell(\"subtitle\", \"SUBTITLE\") %>%   set_cell(\"footer\", \"FOOTER\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   subtitle: filled #>   footer: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"gridifyObject class — gridifyObject-class","title":"gridifyObject class — gridifyObject-class","text":"Class creating object gridify layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"gridifyObject class — gridifyObject-class","text":"row numeric value, span sequence specifying row position object. col numeric value, span sequence specifying column position object. height numeric value specifying height object. width numeric value specifying width object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gridifyObject — gridifyObject","title":"Create a gridifyObject — gridifyObject","text":"Function creating new instance gridifyObject class.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gridifyObject — gridifyObject","text":"","code":"gridifyObject(row, col, height = 1, width = 1)"},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gridifyObject — gridifyObject","text":"row numeric value, span sequence specifying row position object. col numeric value, span sequence specifying row position object. height numeric value specifying height object. Default 1. width numeric value specifying width object. Default 1.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gridifyObject — gridifyObject","text":"instance gridifyObject class.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/gridifyObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gridifyObject — gridifyObject","text":"","code":"object <- gridifyObject(row = 1, col = 1, height = 1, width = 1)"},{"path":"https://pharmaverse.github.io/gridify/reference/layout_issue.html","id":null,"dir":"Reference","previous_headings":"","what":"Template for Layout Issues Note — layout_issue","title":"Template for Layout Issues Note — layout_issue","text":"Template Layout Issues Note","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/layout_issue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Template for Layout Issues Note — layout_issue","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Pharma Layouts — pharma_layout","title":"Pharma Layouts — pharma_layout","text":"pharma_layout functions define structured layouts positioning text elements (titles, subtitles, footnotes, captions, etc.) around outputs. layouts ensure consistency pharmaceutical reporting across different output formats, including A4 letter paper sizes.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pharma Layouts — pharma_layout","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout.html","id":"available-layouts","dir":"Reference","previous_headings":"","what":"Available Layouts","title":"Pharma Layouts — pharma_layout","text":"pharma_layout_base(): base function pharma layouts. pharma_layout_A4(): Layout specifically designed A4 paper size. pharma_layout_letter(): Layout specifically designed letter paper size.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":null,"dir":"Reference","previous_headings":"","what":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"function sets general structure positioning text elements pharma layouts using A4 paper size.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"","code":"pharma_layout_A4(global_gpar = NULL, background = grid::get.gpar()$fill)"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"global_gpar list specifying global graphical parameters change layout. Default NULL, however defaults layout, inherited pharma_layout_base(), : fontfamily = \"Serif\", fontsize = 9 lineheight = 0.95, can overwritten alongside graphical parameters found grid::get.gpar(). background character string specifying background fill colour. Default grid::get.gpar()$fill white background.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"gridifyLayout object structure defined A4 paper size.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"margins A4 layout : top = 1 inch right = 1.69 inches bottom = 1 inch left = 1 inch pharma_layout_base() function used set general layout structure, specific margins applied A4 format.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_A4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pharma Layout (A4) for a gridify object — pharma_layout_A4","text":"","code":"pharma_layout_A4() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 14 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 1 lines #>   Row 2: 1 lines #>   Row 3: 1 lines #>   Row 4: 1 lines #>   Row 5: 1 lines #>   Row 6: 1 lines #>   Row 7: 0 lines #>   Row 8: 0 lines #>   Row 9: 1 lines #>   Row 10: 1 null #>   Row 11: 1 lines #>   Row 12: 1 lines #>   Row 13: 0 lines #>   Row 14: 1 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 10 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 10: 1 null #>  #> Margin: #>   Top: 1 inches #>   Right: 1.69 inches #>   Bottom: 1 inches #>   Left: 1 inches #>  #> Global graphical parameters: #>   fill: white #>   col: black #>   lty: solid #>   lwd: 1 #>   cex: 1 #>   fontsize: 9 #>   lineheight: 0.95 #>   font: 1 #>   fontfamily: serif #>   alpha: 1 #>   lineend: round #>   linejoin: round #>   linemitre: 10 #>   lex: 1  #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left_1: #>     row:1, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_2: #>     row:2, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_3: #>     row:3, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_right_1: #>     row:1, col:3, text:CONFIDENTI..., mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_2: #>     row:2, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_3: #>     row:3, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   output_num: #>     row:4, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_1: #>     row:5, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_2: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_3: #>     row:7, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   by_line: #>     row:8-9, col:1-3, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   note: #>     row:11, col:1-3, text:NULL, mch:100, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   references: #>     row:13, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_left: #>     row:14, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_right: #>     row:14, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   watermark: #>     row:10, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:45,  #>     gpar - fontsize:80, alpha:0.3,  #>  # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr) # Example with all cells filled out gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = pharma_layout_A4() ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") %>%   set_cell(\"output_num\", \"<Output> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"title_3\", \"<Optional Title 3>\") %>%   set_cell(\"by_line\", \"By: <GROUP>, <optionally: Demographic parameters>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"DRAFT\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left_1: filled #>   header_left_2: filled #>   header_left_3: filled #>   header_right_1: filled #>   header_right_2: filled #>   header_right_3: filled #>   output_num: filled #>   title_1: filled #>   title_2: filled #>   title_3: filled #>   by_line: filled #>   note: filled #>   references: filled #>   footer_left: filled #>   footer_right: filled #>   watermark: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Function for Pharma Layouts — pharma_layout_base","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"function sets general structure positioning text elements pharma layouts. defines layout specified margins, global graphical parameters, height adjustment. layout includes cells headers, titles, footers, optional elements like watermarks.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"","code":"pharma_layout_base(   margin = grid::unit(c(t = 1, r = 1, b = 1, l = 1), units = \"inches\"),   global_gpar = NULL,   background = grid::get.gpar()$fill,   adjust_height = TRUE )"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"margin grid::unit object defining margins layout (top, right, bottom, left) inches. Default grid::unit(c(1, 1, 1, 1), \"inches\"). global_gpar list specifying global graphical parameters change layout. Default NULL, however defaults layout : fontfamily = \"Serif\", fontsize = 9 lineheight = 0.95, can overwritten alongside graphical parameters found grid::get.gpar(). background string specifying background fill colour. Default grid::get.gpar()$fill white background. adjust_height logical value indicating whether adjust height layout. Default TRUE.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"gridifyLayout object defines general structure parameters pharma layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"function primarily used internally layout functions pharma_layout_A4() pharma_layout_letter() create specific layouts.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base Function for Pharma Layouts — pharma_layout_base","text":"","code":"# Create a general pharma layout with default settings pharma_layout_base() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 14 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 1 lines #>   Row 2: 1 lines #>   Row 3: 1 lines #>   Row 4: 1 lines #>   Row 5: 1 lines #>   Row 6: 1 lines #>   Row 7: 0 lines #>   Row 8: 0 lines #>   Row 9: 1 lines #>   Row 10: 1 null #>   Row 11: 1 lines #>   Row 12: 1 lines #>   Row 13: 0 lines #>   Row 14: 1 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 10 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 10: 1 null #>  #> Margin: #>   Top: 1 inches #>   Right: 1 inches #>   Bottom: 1 inches #>   Left: 1 inches #>  #> Global graphical parameters: #>   fill: white #>   col: black #>   lty: solid #>   lwd: 1 #>   cex: 1 #>   fontsize: 9 #>   lineheight: 0.95 #>   font: 1 #>   fontfamily: serif #>   alpha: 1 #>   lineend: round #>   linejoin: round #>   linemitre: 10 #>   lex: 1  #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left_1: #>     row:1, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_2: #>     row:2, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_3: #>     row:3, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_right_1: #>     row:1, col:3, text:CONFIDENTI..., mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_2: #>     row:2, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_3: #>     row:3, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   output_num: #>     row:4, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_1: #>     row:5, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_2: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_3: #>     row:7, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   by_line: #>     row:8-9, col:1-3, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   note: #>     row:11, col:1-3, text:NULL, mch:100, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   references: #>     row:13, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_left: #>     row:14, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_right: #>     row:14, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   watermark: #>     row:10, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:45,  #>     gpar - fontsize:80, alpha:0.3,  #>   library(magrittr) # Customize margins and global graphical parameters and fill all cells gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = pharma_layout_base(     margin = grid::unit(c(0.5, 0.5, 0.5, 0.5), \"inches\"),     global_gpar = list(col = \"blue\", fontsize = 10)   ) ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") %>%   set_cell(\"output_num\", \"<Output> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"title_3\", \"<Optional Title 3>\") %>%   set_cell(\"by_line\", \"By: <GROUP>, <optionally: Demographic parameters>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"DRAFT\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left_1: filled #>   header_left_2: filled #>   header_left_3: filled #>   header_right_1: filled #>   header_right_2: filled #>   header_right_3: filled #>   output_num: filled #>   title_1: filled #>   title_2: filled #>   title_3: filled #>   by_line: filled #>   note: filled #>   references: filled #>   footer_left: filled #>   footer_right: filled #>   watermark: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":null,"dir":"Reference","previous_headings":"","what":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"function sets general structure positioning text elements pharma layouts using letter paper size.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"","code":"pharma_layout_letter(global_gpar = NULL, background = grid::get.gpar()$fill)"},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"global_gpar list specifying global graphical parameters change layout. Default NULL, however defaults layout, inherited pharma_layout_base(), : fontfamily = \"Serif\", fontsize = 9 lineheight = 0.95, can overwritten alongside graphical parameters found grid::get.gpar(). background character string specifying background fill colour. Default grid::get.gpar()$fill white background.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"gridifyLayout object structure defined letter paper size.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"margins letter layout : top = 1 inch right = 1 inch bottom = 1.23 inches left = 1 inch pharma_layout_base() function used set general layout structure, specific margins applied letter format.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/pharma_layout_letter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pharma Layout (Letter) for a gridify object — pharma_layout_letter","text":"","code":"pharma_layout_letter() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 14 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 1 lines #>   Row 2: 1 lines #>   Row 3: 1 lines #>   Row 4: 1 lines #>   Row 5: 1 lines #>   Row 6: 1 lines #>   Row 7: 0 lines #>   Row 8: 0 lines #>   Row 9: 1 lines #>   Row 10: 1 null #>   Row 11: 1 lines #>   Row 12: 1 lines #>   Row 13: 0 lines #>   Row 14: 1 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 10 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 10: 1 null #>  #> Margin: #>   Top: 1 inches #>   Right: 1 inches #>   Bottom: 1.23 inches #>   Left: 1 inches #>  #> Global graphical parameters: #>   fill: white #>   col: black #>   lty: solid #>   lwd: 1 #>   cex: 1 #>   fontsize: 9 #>   lineheight: 0.95 #>   font: 1 #>   fontfamily: serif #>   alpha: 1 #>   lineend: round #>   linejoin: round #>   linemitre: 10 #>   lex: 1  #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left_1: #>     row:1, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_2: #>     row:2, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_left_3: #>     row:3, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   header_right_1: #>     row:1, col:3, text:CONFIDENTI..., mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_2: #>     row:2, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   header_right_3: #>     row:3, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   output_num: #>     row:4, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_1: #>     row:5, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_2: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title_3: #>     row:7, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   by_line: #>     row:8-9, col:1-3, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   note: #>     row:11, col:1-3, text:NULL, mch:100, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   references: #>     row:13, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_left: #>     row:14, col:1, text:NULL, mch:Inf, x:0, y:0.5, hjust:0, vjust:0.5, rot:0,  #>   footer_right: #>     row:14, col:3, text:NULL, mch:Inf, x:1, y:0.5, hjust:1, vjust:0.5, rot:0,  #>   watermark: #>     row:10, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:45,  #>     gpar - fontsize:80, alpha:0.3,  #>   library(magrittr) # Example with all cells filled out gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = pharma_layout_letter() ) %>%   set_cell(\"header_left_1\", \"My Company\") %>%   set_cell(\"header_left_2\", \"<PROJECT> / <INDICATION>\") %>%   set_cell(\"header_left_3\", \"<STUDY>\") %>%   set_cell(\"header_right_1\", \"CONFIDENTIAL\") %>%   set_cell(\"header_right_2\", \"<Draft or Final>\") %>%   set_cell(\"header_right_3\", \"Data Cut-off: YYYY-MM-DD\") %>%   set_cell(\"output_num\", \"<Output> xx.xx.xx\") %>%   set_cell(\"title_1\", \"<Title 1>\") %>%   set_cell(\"title_2\", \"<Title 2>\") %>%   set_cell(\"title_3\", \"<Optional Title 3>\") %>%   set_cell(\"by_line\", \"By: <GROUP>, <optionally: Demographic parameters>\") %>%   set_cell(\"note\", \"<Note or Footnotes>\") %>%   set_cell(\"references\", \"<References:>\") %>%   set_cell(\"footer_left\", \"Program: <PROGRAM NAME>, YYYY-MM-DD at HH:MM\") %>%   set_cell(\"footer_right\", \"Page xx of nn\") %>%   set_cell(\"watermark\", \"DRAFT\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left_1: filled #>   header_left_2: filled #>   header_left_3: filled #>   header_right_1: filled #>   header_right_2: filled #>   header_right_3: filled #>   output_num: filled #>   title_1: filled #>   title_2: filled #>   title_3: filled #>   by_line: filled #>   note: filled #>   references: filled #>   footer_left: filled #>   footer_right: filled #>   watermark: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/print-gridifyClass-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for gridifyClass — print,gridifyClass-method","title":"Print method for gridifyClass — print,gridifyClass-method","text":"Method printing gridifyClass object. Prevents show method triggered.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/print-gridifyClass-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for gridifyClass — print,gridifyClass-method","text":"","code":"# S4 method for class 'gridifyClass' print(x, ...)"},{"path":"https://pharmaverse.github.io/gridify/reference/print-gridifyClass-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for gridifyClass — print,gridifyClass-method","text":"x gridifyClass object. ... Additional arguments. yet use.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/print-gridifyClass-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for gridifyClass — print,gridifyClass-method","text":"Invisibly grid call used draw object.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/print-gridifyClass-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for gridifyClass — print,gridifyClass-method","text":"","code":"# (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout() ) %>%   set_cell(\"title\", \"TITLE\")  print(g)   # grid call is returned when printed to a variable gg <- print(g) # unevaluated grid code gg #> grid::gTree(children = grid::gList(grid::rectGrob(x = 0, y = 0,  #>     width = 1, height = 1, just = c(\"left\", \"bottom\"), gp = grid::gpar(fill = \"white\",  #>         col = \"white\")), grid::gTree(children = do.call(grid::gList,  #>     list(grid::grobTree(grid::editGrob(OBJECT, vp = grid::viewport(height = grid::unit.pmax(grid::unit(1,  #>         \"npc\"), grid::unit(1, \"inch\")), width = grid::unit.pmax(grid::unit(1,  #>         \"npc\"), grid::unit(1, \"inch\")))), vp = grid::viewport(layout.pos.row = 2,  #>         layout.pos.col = 1)), grid::grobTree(grid::textGrob(label = \"TITLE\",  #>         x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5, rot = 0,  #>         gp = grid::gpar()), gp = grid::gpar(), vp = grid::viewport(layout.pos.row = 1,  #>         layout.pos.col = 1)))), vp = grid::viewport(name = \"lyt\",  #>     x = grid::unit(0.1, \"npc\"), y = grid::unit(0.1, \"npc\"), just = c(\"left\",  #>         \"bottom\"), width = grid::unit(1, \"npc\") - grid::unit(0.1,  #>         \"npc\") - grid::unit(0.1, \"npc\"), height = grid::unit(1,  #>         \"npc\") - grid::unit(0.1, \"npc\") - grid::unit(0.1, \"npc\"),  #>     gp = grid::gpar(), layout = grid::grid.layout(nrow = 3L,  #>         ncol = 1L, heights = grid::unit(c(0.42, 1, 0), c(\"cm\",  #>         \"null\", \"lines\")), widths = grid::unit(1, \"npc\")))))) #> attr(,\"env\") #> <environment: 0x56368529e7a0> # evaluate the code grid::grid.draw(eval(gg, envir = attr(gg, \"env\"))) # or OBJECT <- attr(gg, \"env\")[[\"OBJECT\"]] grid::grid.draw(eval(gg))"},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Add text elements to a gridify cell — set_cell","title":"Add text elements to a gridify cell — set_cell","text":"function sets text element specific cell gridify object. element can positioned rotated desired, graphical parameters can customized.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add text elements to a gridify cell — set_cell","text":"","code":"set_cell(   object,   cell,   text,   mch = NULL,   x = NULL,   y = NULL,   hjust = NULL,   vjust = NULL,   rot = NULL,   gpar = NULL,   ... )  # S4 method for class 'gridifyClass' set_cell(   object,   cell,   text,   mch = NULL,   x = NULL,   y = NULL,   hjust = NULL,   vjust = NULL,   rot = NULL,   gpar = NULL,   ... )"},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add text elements to a gridify cell — set_cell","text":"object gridifyClass object. (See note) cell single character string specifying name cell. text single character string specifying text element. setting string within text argument, can add new lines using newline character, \\n. mch positive numeric value specifying maximum number characters per line. functionality based strwrap() function. default, avoids breaking words splits lines specified. x numeric value specifying x (horizontal) location text element cell. Takes values 0 1; 0 places text element left side cell 1 right side. y numeric value specifying y (vertical) location text element cell. Takes values 0 1; 0 places text element bottom cell 1 top. hjust numeric value specifying part text element lines x value. Adjusting value changes text element positioned horizontally relative x coordinate specified . Takes values 0 1; 0 aligns left side text element x coordinate 1 aligns right side. vjust numeric value specifying part text element lines y value. Adjusting value changes text element positioned vertically relative y coordinate specified . Takes values 0 1; 0 aligns bottom text element y coordinate 1 aligns top. rot numeric value specifying rotation text element anticlockwise x-axis. gpar grid::gpar() object specifying graphical parameters text element. ... Additional arguments.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add text elements to a gridify cell — set_cell","text":"gridifyClass object added text element.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add text elements to a gridify cell — set_cell","text":"set_cell() can also make minor adjustments positioning text elements layout. existing layouts generally meet needs require additional lines certain cells, need create new layout. using newline character, \\n, within text, can add many new lines desired. layouts default scales = \"fixed\", layout automatically adjust fit new lines, ensuring elements overlap. applying substantial changes layout applying adjustments across multiple objects projects, recommended create custom layout instead. promote reproducibility consistency across projects. See vignette(\"create_custom_layout\", package = \"gridify\") information create custom layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add text elements to a gridify cell — set_cell","text":"object argument passed directly adding set_cell() gridify object already defined. need pass object directly using pipes. See first example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/set_cell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add text elements to a gridify cell — set_cell","text":"","code":"# using set_cell() without the pipe operator object <- ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +   ggplot2::geom_line()  g <- gridify(object = object, layout = simple_layout()) g <- set_cell(g, \"title\", \"TITLE\") g #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: empty   # using set_cell() with the pipe operator # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  gridify(object = object, layout = simple_layout()) %>%   set_cell(\"title\", \"TITLE\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: empty   # using multiple lines in set_cell() gridify(object, layout = simple_layout()) %>%   set_cell(cell = \"title\", text = \"THIS IS THE MAIN TITLE\\nA Second Title\\nSubtitle\") %>%   set_cell(     cell = \"footer\", text = \"This is a footer.\\nWe can have multiple lines here as well.\",     x = 0, hjust = 0   ) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled   # using mch in set_cell() long_footer_string <- paste0(   \"This is a footer. We can have a long description here.\",   \"We can have another long description here.\",   \"We can have another long description here.\" ) gridify(object, layout = simple_layout()) %>%   set_cell(     cell = \"footer\", long_footer_string, mch = 60, x = 0, hjust = 0   ) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: empty #>   footer: filled   # using the location and alignment arguments # the left side of the text is on the left side of the cell gridify(object = object, layout = simple_layout()) %>%   set_cell(\"title\", \"TITLE\", x = 0, hjust = 0) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: empty   # the right side of the text is on the right side of the cell gridify(object = object, layout = simple_layout()) %>%   set_cell(\"title\", \"TITLE\", x = 1, hjust = 1) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: empty   # the right side of the text is 30% from the right side of the cell gridify(object = object, layout = simple_layout()) %>%   set_cell(\"title\", \"TITLE\", x = 0.7, hjust = 1) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: empty   # using the rotation argument gridify(object = object, layout = simple_layout()) %>%   set_cell(\"title\", \"TITLE\", x = 0.7, rot = 45) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: empty   # using the graphical parameters argument gridify(object = object, layout = simple_layout()) %>%   set_cell(\"title\", \"TITLE\", x = 0.7, rot = 45, gpar = grid::gpar(fontsize = 20)) %>%   set_cell(\"footer\", \"FOOTER\", x = 0.2, y = 1, gpar = grid::gpar(col = \"blue\")) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyClass-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for gridifyClass — show,gridifyClass-method","title":"Show method for gridifyClass — show,gridifyClass-method","text":"Method showing gridifyClass object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyClass-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for gridifyClass — show,gridifyClass-method","text":"","code":"# S4 method for class 'gridifyClass' show(object)"},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyClass-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for gridifyClass — show,gridifyClass-method","text":"object gridifyClass object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyClass-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show method for gridifyClass — show,gridifyClass-method","text":"object titles, subtitles, footnotes, text elements around output printed graphics device. list also printed console containing: dimensions layout object located layout size margin global graphical parameters list elements cells filled empty","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyClass-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show method for gridifyClass — show,gridifyClass-method","text":"","code":"g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) show(g) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   header_left: empty #>   header_middle: empty #>   header_right: empty #>   title: empty #>   subtitle: empty #>   note: empty #>   footer_left: empty #>   footer_middle: empty #>   footer_right: empty"},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyLayout-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for gridifyLayout — show,gridifyLayout-method","title":"Show method for gridifyLayout — show,gridifyLayout-method","text":"Method showing gridifyLayout object. prints names cells layout.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyLayout-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for gridifyLayout — show,gridifyLayout-method","text":"","code":"# S4 method for class 'gridifyLayout' show(object)"},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyLayout-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for gridifyLayout — show,gridifyLayout-method","text":"object gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyLayout-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show method for gridifyLayout — show,gridifyLayout-method","text":"list cells defined layout.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/show-gridifyLayout-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show method for gridifyLayout — show,gridifyLayout-method","text":"","code":"show(complex_layout()) #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 6 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 0 lines #>   Row 3: 0 lines #>   Row 4: 1 null #>   Row 5: 0 lines #>   Row 6: 0 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 4 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 4: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_middle: #>     row:1, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_right: #>     row:1, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title: #>     row:2, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   subtitle: #>     row:3, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   note: #>     row:5, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_left: #>     row:6, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_middle: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_right: #>     row:6, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>"},{"path":"https://pharmaverse.github.io/gridify/reference/show_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the cells in a gridify object or layout — show_cells","title":"Show the cells in a gridify object or layout — show_cells","text":"Method showing cells gridifyClass gridifyLayout object. prints names cells gridifyClass indicates whether cell filled empty.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the cells in a gridify object or layout — show_cells","text":"","code":"show_cells(object)  # S4 method for class 'gridifyClass' show_cells(object)  # S4 method for class 'gridifyLayout' show_cells(object)"},{"path":"https://pharmaverse.github.io/gridify/reference/show_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the cells in a gridify object or layout — show_cells","text":"object gridifyClass gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the cells in a gridify object or layout — show_cells","text":"print available cells gridifyClass indicates whether cell filled empty.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the cells in a gridify object or layout — show_cells","text":"","code":"show_cells(complex_layout()) #> Cells: #>   header_left #>   header_middle #>   header_right #>   title #>   subtitle #>   note #>   footer_left #>   footer_middle #>   footer_right  # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout() ) %>%   set_cell(\"title\", \"TITLE\")  show_cells(g) #> Cells: #>   title: filled #>   footer: empty  g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\")  show_cells(g) #> Cells: #>   header_left: filled #>   header_middle: empty #>   header_right: filled #>   title: filled #>   subtitle: empty #>   note: filled #>   footer_left: filled #>   footer_middle: empty #>   footer_right: filled"},{"path":"https://pharmaverse.github.io/gridify/reference/show_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the layout in a given gridify object or layout — show_layout","title":"Show the layout in a given gridify object or layout — show_layout","text":"Method showing layout gridifyClass gridifyLayout object. prints layout object, including number rows columns heights widths rows columns graphics device.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the layout in a given gridify object or layout — show_layout","text":"","code":"show_layout(x)  # S4 method for class 'gridifyClass' show_layout(x)  # S4 method for class 'gridifyLayout' show_layout(x)"},{"path":"https://pharmaverse.github.io/gridify/reference/show_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the layout in a given gridify object or layout — show_layout","text":"x gridifyClass gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the layout in a given gridify object or layout — show_layout","text":"object showing layout, including widths heights rows columns.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_layout.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Show the layout in a given gridify object or layout — show_layout","text":"using show_layout(), lines initially visible. lines may assigned zero space dynamically updated space text added.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/gridify/reference/show_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the layout in a given gridify object or layout — show_layout","text":"","code":"g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout() ) show_layout(g)   g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) show_layout(g)   show_layout(simple_layout())  show_layout(complex_layout())   # Example with a custom layout  custom_layout <- gridifyLayout(   nrow = 3L,   ncol = 2L,   heights = grid::unit(c(0.15, 0.7, 0.15), \"npc\"),   widths = grid::unit(c(0.5, 0.5), \"npc\"),   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),   global_gpar = grid::gpar(),   adjust_height = FALSE,   object = gridifyObject(row = 2, col = 1),   cells = gridifyCells(header = gridifyCell(     row = 1,     col = 1,     x = 0.5,     y = 0.5,     hjust = 0.5,     vjust = 0.5,     rot = 0,     gpar = grid::gpar()   ), footer = gridifyCell(     row = 2,     col = 2,     x = 0.5,     y = 0.5,     hjust = 0.5,     vjust = 0.5,     rot = 0,     gpar = grid::gpar()   )) )  show_layout(custom_layout)"},{"path":"https://pharmaverse.github.io/gridify/reference/show_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the layout specifications of a gridifyClass or gridifyLayout — show_spec","title":"Show the layout specifications of a gridifyClass or gridifyLayout — show_spec","text":"Method showing specifications layout gridifyClass gridifyLayout object, including, limited : Layout dimensions Heights rows Widths columns Margins Graphical parameters defined layout. Default specs per cell.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the layout specifications of a gridifyClass or gridifyLayout — show_spec","text":"","code":"show_spec(object)  # S4 method for class 'gridifyLayout' show_spec(object)  # S4 method for class 'gridifyClass' show_spec(object)"},{"path":"https://pharmaverse.github.io/gridify/reference/show_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the layout specifications of a gridifyClass or gridifyLayout — show_spec","text":"object gridifyClass gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the layout specifications of a gridifyClass or gridifyLayout — show_spec","text":"print specifications gridifyClass gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/show_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the layout specifications of a gridifyClass or gridifyLayout — show_spec","text":"","code":"show_spec(complex_layout()) #> Layout dimensions: #>   Number of rows: 6 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 0 lines #>   Row 3: 0 lines #>   Row 4: 1 null #>   Row 5: 0 lines #>   Row 6: 0 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 4 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 4: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_middle: #>     row:1, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_right: #>     row:1, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title: #>     row:2, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   subtitle: #>     row:3, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   note: #>     row:5, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_left: #>     row:6, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_middle: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_right: #>     row:6, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,   # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout() ) %>%   set_cell(\"title\", \"TITLE\")  show_spec(g) #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 1 null #>   Row 3: 0 lines #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,   g <- gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = complex_layout() ) %>%   set_cell(\"header_left\", \"Left Header\") %>%   set_cell(\"header_right\", \"Right Header\") %>%   set_cell(\"title\", \"Title\") %>%   set_cell(\"note\", \"Note\") %>%   set_cell(\"footer_left\", \"Left Footer\") %>%   set_cell(\"footer_right\", \"Right Footer\")  show_spec(g) #> Layout dimensions: #>   Number of rows: 6 #>   Number of columns: 3 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 0 lines #>   Row 3: 0 lines #>   Row 4: 1 null #>   Row 5: 0 lines #>   Row 6: 0 lines #>  #> Widths of columns: #>   Column 1: 0.333333333333333 npc #>   Column 2: 0.333333333333333 npc #>   Column 3: 0.333333333333333 npc #>  #> Object Position: #>   Row: 4 #>   Col: 1-3 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 4: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   header_left: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_middle: #>     row:1, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   header_right: #>     row:1, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   title: #>     row:2, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   subtitle: #>     row:3, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   note: #>     row:5, col:1-3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_left: #>     row:6, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_middle: #>     row:6, col:2, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer_right: #>     row:6, col:3, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,"},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Layout for a gridify object — simple_layout","title":"Simple Layout for a gridify object — simple_layout","text":"Creates simple layout containing two text element cells: title footer.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Layout for a gridify object — simple_layout","text":"","code":"simple_layout(   margin = grid::unit(c(t = 0.1, r = 0.1, b = 0.1, l = 0.1), units = \"npc\"),   global_gpar = grid::gpar(),   background = grid::get.gpar()$fill,   scales = c(\"fixed\", \"free\") )"},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Layout for a gridify object — simple_layout","text":"margin unit object specifying margins around output. Default 10% output area sides. global_gpar gpar object specifying global graphical parameters. Must result call grid::gpar(). background string specifying background fill colour. Default grid::get.gpar()$fill white background. scales string, either \"free\" \"fixed\". default, \"fixed\" ensures text elements (titles, footers, etc.) retain static height, preventing text overlap maintaining structured layout. However, may result different height proportions text elements output. \"free\" option makes row heights proportional, allowing scale dynamically based overall output size. ensures text elements output maintain relative proportions.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Layout for a gridify object — simple_layout","text":"gridifyLayout object.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Layout for a gridify object — simple_layout","text":"layout consists three rows, one title, output, footer. heights rows simple_layout \"free\" scales 15%, 70% 15% area respectively. heights rows simple_layout \"fixed\" scales adjusted n number lines text elements around output rest area taken output. Please note output space reduced, text elements around output retain space makes output appear smaller.","code":""},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simple Layout for a gridify object — simple_layout","text":"Font Issue Information: Changes fontfamily may ignored devices, supported PostScript, PDF, X11, Windows, Quartz. fontfamily may used specify one Hershey Font families (e.g., HersheySerif, serif), specification honoured devices. encounter warning, can register fonts using extrafont package:   still see warning using RStudio, try changing graphics backend. Negative Dimensions Issues: grobs grid package ggplot2 objects (converted grobs gridify) may appear distorted output insufficient space window, caused negative dimensions. resolved. However, affecting layout, please increase window size use static heights/widths custom layouts. negative dimensions caused way grid handles null npc heights/widths dimensions static, npc null values may cause unexpected behaviour window size small. resolved setting minimum size object gridify object 1 inch dimension. following example demonstrates behaviour Try resizing window: gt Font Size Issue: specifying font sizes, gt package interprets values unit pixels (px), whilst grid package, gridify built, assumes points (pt). result, even set font sizes gt gridify (using grid::gpar()) number, may still appear different. convert point size pixel size, multiply point size 4/3.","code":"library(extrafont) font_import() loadfonts(device = 'all') library(grid) library(ggplot2) grid.newpage() object <- ggplot2::ggplotGrob(ggplot(mtcars, aes(mpg, wt)) + geom_line()) grid::grid.draw(   grid::grobTree(     grid::grobTree(       grid::editGrob(         object,         vp = grid::viewport(           # height = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\")),           # width = grid::unit.pmax(grid::unit(1, \"npc\"), grid::unit(1, \"inch\"))         )       ),       vp = grid::viewport(         layout.pos.row = 2,         layout.pos.col = 1:3       )     ),     vp = grid::viewport(       layout = grid::grid.layout(         nrow = 3,         ncol = 3,         heights = grid::unit(c(9, 1, 9), c(\"cm\", \"null\", \"cm\"))       )     )   ) )"},{"path":"https://pharmaverse.github.io/gridify/reference/simple_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Layout for a gridify object — simple_layout","text":"","code":"simple_layout() #> gridifyLayout object #> --------------------- #> Layout dimensions: #>   Number of rows: 3 #>   Number of columns: 1 #>  #> Heights of rows: #>   Row 1: 0 lines #>   Row 2: 1 null #>   Row 3: 0 lines #>  #> Widths of columns: #>   Column 1: 1 npc #>  #> Object Position: #>   Row: 2 #>   Col: 1 #>   Width: 1 #>   Height: 1 #>  #> Object Row Heights: #>   Row 2: 1 null #>  #> Margin: #>   Top: 0.1 npc #>   Right: 0.1 npc #>   Bottom: 0.1 npc #>   Left: 0.1 npc #>  #> Global graphical parameters: #>   Are not set #>  #> Background colour: #>   white #>  #> Default Cell Info: #>   title: #>     row:1, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   footer: #>     row:3, col:1, text:NULL, mch:Inf, x:0.5, y:0.5, hjust:0.5, vjust:0.5, rot:0,  #>   # (to use |> version 4.1.0 of R is required, for lower versions we recommend %>% from magrittr) library(magrittr)  gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout() ) %>%   set_cell(\"title\", \"TITLE\") %>%   set_cell(\"footer\", \"FOOTER\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled   gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout(     margin = grid::unit(c(5, 2, 2, 2), \"cm\"),     global_gpar = grid::gpar(fontsize = 20, col = \"blue\")   ) ) %>%   set_cell(\"title\", \"TITLE\") %>%   set_cell(\"footer\", \"FOOTER\") #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled   gridify(   object = ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg, y = wt)) +     ggplot2::geom_line(),   layout = simple_layout() ) %>%   set_cell(\"title\", \"TITLE\\nSUBTITLE\", x = 0.7, gpar = grid::gpar(fontsize = 12)) %>%   set_cell(\"footer\", \"FOOTER\", x = 0.5, y = 0.5, gpar = grid::gpar()) #> gridifyClass object #> --------------------- #> Please run `show_spec(object)` or print the layout to get more specs. #>  #> Cells: #>   title: filled #>   footer: filled"},{"path":"https://pharmaverse.github.io/gridify/news/index.html","id":"gridify-074","dir":"Changelog","previous_headings":"","what":"gridify 0.7.4","title":"gridify 0.7.4","text":"Updated export_to method examples use dontrun. Added doi DESCRIPTION file.","code":""},{"path":"https://pharmaverse.github.io/gridify/news/index.html","id":"gridify-073","dir":"Changelog","previous_headings":"","what":"gridify 0.7.3","title":"gridify 0.7.3","text":"Improved show_spec method gridifyLayout. New feature background colour layouts, new background argument.","code":""},{"path":"https://pharmaverse.github.io/gridify/news/index.html","id":"gridify-072","dir":"Changelog","previous_headings":"","what":"gridify 0.7.2","title":"gridify 0.7.2","text":"First open-source release.","code":""}]
